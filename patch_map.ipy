import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as colors
from scipy import signal,stats
import TFTool
import tone
import pandas as pd
import itertools
from lsfm_psth import Psth
import math
import regression


%matplotlib inline
df = pd.read_csv('patch_list_E.csv', dtype={'date':str, '#':str})
idx_tone = df.index[(df['type']=='Pure Tones') & (df['project']!='Vc') & (df['hard_exclude']!='exclude')]
idx_tone = [i for i in idx_tone if i > 146]
idx_lsfm = df.index[(df['type']=='Log sFM') & (df['project']!='Vc') & (df['hard_exclude']!='exclude')]
idx_lsfm = [i for i in idx_lsfm if i > 146]

region = [[0, 1.0, 0.0, 1.029], [0, 0.0, 0.926, 0.726], [0.02, 0.02, 0.02, 0.203], [0.04, 0.04, 0.223, 0.166]]


"""analysis type"""
saveplot=False

get_tonePSTH = False
get_lsfmPSTH = False
correlate_PSTH = False
get_region = False
map_bf = False
map_correlation = False
tone_analysis = False
lsfm_analysis = False
spike_analysis = False
para_sep_analysis = True

if get_tonePSTH:
    
    tonePSTH_all = {'name':[], 'psth':[]}
    
    for df_loc in idx_tone:
        filename = df['filename'][df_loc]
        version = df['Py_version'][df_loc]
        mouseID = df['mouse_id'][df_loc]
        fullname = mouseID+'_' + filename
        data = np.load(f'{filename}.npy', allow_pickle=True)
        resp = data.item()['resp']
        loud = sorted(set(data.item()['loud']))
        freq = sorted(set(data.item()['freq']))
        try:
            loud.remove(0.0)
            freq.remove(0.0)
        except:
            pass
                
        para = data.item()['para']
    
        resp_adjust = [tone.base_adjust(r) for r in resp]
        resp_merge, para_merge = tone.resp_merge(resp_adjust, para)
        resp_filt = TFTool.prefilter(resp_merge)
        yy = tone.psth(resp_filt, fullname)
        tonePSTH_all['name'].append(fullname)
        tonePSTH_all['psth'].append(yy)
        

if get_lsfmPSTH:
    
    lsfmPSTH_all = {'name':[], 'psth':[]}
    
    for df_loc in idx_lsfm:
        filename = df['filename'][df_loc]
        version = df['Py_version'][df_loc]
        mouseID = df['mouse_id'][df_loc]
        fullname = mouseID+'_' + filename
        data = np.load(f'{filename}_lsfm.npy', allow_pickle=True)
        resp = data.item()['resp']
        para = data.item()['para']
        
        psth = Psth(resp, para, fullname, version)
        xx,yy,err=psth.psth_all(plot=False, saveplot=False)
        lsfmPSTH_all['name'].append(fullname)
        lsfmPSTH_all['psth'].append(yy)
        
        
if correlate_PSTH:
    def corr_PSTH(psth_all, save=False):
        
        combination = list(itertools.combinations(psth_all['name'],2))
        combination_index = list((i,j) for (i,_), (j,_) in 
                                 itertools.combinations(enumerate(psth_all['name']),2))
        
        max_corr = []
        for i,j in combination_index:
            corr = signal.correlate(psth_all['psth'][i], psth_all['psth'][j], 'full')
            #+-30ms windows and get maximum correlation
            points = len(psth_all['psth'][i])
            #points per milisecond
            fs = 25
            max_corr.append(corr[points-fs*30:points+fs*30].max())
            
        corr = pd.DataFrame(columns = ['combination_1', 'combination_2', 'correlation'])
        corr['combination_1'] = [i[0] for i in combination]
        corr['combination_2'] = [i[1] for i in combination]
        corr['correlation'] = max_corr
        
        if save:
            corr.to_csv('max_correlation.csv', index=False)
            
    corr_PSTH(tonePSTH_all, save=True)
    #corr_PSTH(lsfmPSTH_all, save=True)
    
   
if map_bf:
    coords = pd.read_excel('mapping_coordinate.xlsx', sheet_name='coords')
    df2 = pd.read_csv('patch_list_with_bf.csv', dtype={'date':str, '#':str})
    idx = df2.index[(df2['type']=='Pure Tones') & (df2['project']=='Ic_map') & (df2['hard_exclude']!='exclude') 
                    & (df2['mouse_id']!='TG150') & (df2['mouse_id']!='TG147')]
    #patch_coord = pd.read_excel('patch_coordinate.xlsx')
    #final_coord = pd.DataFrame(columns=['MouseID', 'Region', 'X', 'Y'])
    #temp_dict = {'MouseID':[], 'Region':[], 'X':[], 'Y':[]}
    
    patch_x, patch_y = [],[]
    bf = []
    for i in idx:
        mouseID = df2.iloc[i]['mouse_id']
        site = f'Patch_{df2.iloc[i]["site"]}'
 
        patch_x.append(coords[(coords['mouseid'] == mouseID) & (coords['regions'] == site)].x.item())
        patch_y.append(coords[(coords['mouseid'] == mouseID) & (coords['regions'] == site)].y.item())
        bf.append(df2.iloc[i].best_frequency.item())
    
    bf_k = np.array([i/1000 for i in bf])
    patch_x = np.array(patch_x)
    patch_y = np.array(patch_y)
    
    fig, ax = plt.subplots()
    ax.scatter(region[0], region[1], c='black', s=500)
    im = ax.scatter(patch_x+np.random.normal(0, .03, patch_x.size), patch_y+np.random.normal(0, .03, patch_y.size), c=bf_k, cmap='inferno') 

    plt.title('bf_map')
    plt.savefig('bf_map.png', dpi=500)
    
def plot_map(patch_x, patch_y, arr, region=region, saveplot=False, **kwargs):
    from matplotlib import patches
    arr = np.array(arr)
    region_xy = list(zip(region[0], region[1]))
    
    title = kwargs.get('title')
    ylabel = kwargs.get('ylabel')
    cmap = kwargs.get('cmap')
    vmax = kwargs.get('vmax')
    vmin = kwargs.get('vmin')
    diverge = kwargs.get('diverge')
    
    norm=None
    if not cmap:
        cmap='inferno'
    
    if diverge:
        norm = colors.CenteredNorm()
        cmap = 'RdYlBu_r'
    
    x_dev = np.random.normal(0, .03, len(patch_x))
    y_dev = np.random.normal(0, .03, len(patch_y))
    
    fig, ax = plt.subplots()
    for i in range(4):
        ellipse = patches.Ellipse(region_xy[i], region[2][i]*2, region[3][i]*2, angle=0, color='grey', alpha=0.9)
        ax.add_patch(ellipse)
    #ax.scatter(region_x, region_y, c='grey', s=500)
    
    from matplotlib.colors import LinearSegmentedColormap
    cdict = plt.get_cmap('inferno')
# =============================================================================
#     colors = cmap(np.linspace(0.25, 0.75, 256))
#     cmap = LinearSegmentedColormap('cmap', colors)
# =============================================================================
    
    im = ax.scatter(patch_x+x_dev, patch_y+y_dev, c=arr, cmap=cmap, 
                    s=50, alpha=0.9, vmin=vmin, vmax=vmax, norm=norm)
    cbar = fig.colorbar(im)
    cbar.ax.set_ylabel(ylabel, fontsize=16)
    #ax.set_title(title, fontsize=16)
    ax.set_xlabel('A1-UF axis', fontsize=16)
    ax.set_ylabel('A1-A2 axis', fontsize=16)
    ax.tick_params(axis='both', which='major', labelsize=14)
    
    if saveplot:
        plt.savefig(f'{title}_map.png', dpi=500, bbox_inches='tight')
        plt.show()
        plt.clf()
    else:
        plt.show()
        plt.clf()

    
def plot_ortho(ortho, arr, fit, saveplot=False, **kwargs):
    arr = np.array(arr)
    title = kwargs.get('title')
    ylabel = kwargs.get('ylabel')
    x_dev = np.random.normal(0, .01, len(ortho))
    
    vmax = kwargs.get('vmax')
    vmin = kwargs.get('vmin')
    
    fig, ax = plt.subplots()
    ax.scatter(ortho+x_dev, arr, s=50, alpha=0.7)
    #ax.plot(fit[0], fit[1], color='red', label=f'R-Squared:{fit[2]}, p={fit[3]}')
    ax.plot(fit[0], fit[1], color='red')
    ax.annotate(f'R^2: {fit[2]}', xy=(0.99, 0.97), xycoords='axes fraction', size=14, ha='right', va='top')
    ax.annotate(f'P= {fit[3]}', xy=(0.99, 0.90), xycoords='axes fraction', size=14, ha='right', va='top')
    ax.set_ylabel(ylabel, fontsize=16)
    ax.set_xlabel('A1-AAF axis', fontsize=16)
    ax.tick_params(axis='both', which='major', labelsize=14)
    #ax.set_title(title, fontsize=16)
    plt.ylim(vmin,vmax)
    
    if saveplot:
        plt.savefig(f'{title}_ortho.png', dpi=500, bbox_inches='tight')
        plt.show()
        plt.clf()
    else:
        plt.show()
        plt.clf()


def check_map(df, x, y, ortho, arr):
    import plotly.io as pio
    import plotly.express as px
    pio.renderers.default='browser'
    
    mouseid = list(df['mouseid'])
    site = list(df['patch_site'])
    filename = list(df['filename']) 
    name = [f'{a[0]}_{a[1]}_{filename[i]}' for i ,a in enumerate(list(zip(mouseid, site)))]
    
    x_dev = np.random.normal(0, .05, len(x))
    fig = px.scatter(x = ortho+x_dev, y = arr, text=name)
    fig.show()
    
    fig = px.scatter(x=x+x_dev, y=y+x_dev, text=name)
    fig.show()
    


if tone_analysis:
    coords = pd.read_excel('mapping_coordinate.xlsx', sheet_name='coords')
    tone_psth = pd.read_csv('tone_psth_para_bf_new.csv')
    mouseid = list(tone_psth['mouseid'])
    filename = list(tone_psth['filename'])
    sites = list(tone_psth['patch_site'])
    
    patch_x, patch_y, ortho = [],[],[]
    for i,m in enumerate(mouseid):
        site = f'Patch_{sites[i]}'
        patch_x.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].x.item())
        patch_y.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].y.item())
        ortho.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].orthogonal.item())
    
    bf = np.array(list(tone_psth['best_frequency']))/1000
    plot_map(patch_x, patch_y, bf, saveplot=True, title='Best_Frequency', ylabel='Best Frequency (kHz)', cmap='viridis')
    #regression.regression_test(ortho, bf)
    fit = regression.regression_poly(ortho, bf, degree=1)
    plot_ortho(ortho, bf, fit, saveplot=True, title='Best_Frequency', ylabel='Best Frequency (kHz)')
    
    bandwidth = list(tone_psth['bandwidth'])
    plot_map(patch_x, patch_y, bandwidth, saveplot=True, title='Bandwidth', ylabel='Bandwidth (octave)', cmap='viridis')
    #regression.regression_test(ortho, bandwidth)
    fit = regression.regression_poly(ortho, bandwidth, degree=1)
    plot_ortho(ortho, bandwidth, fit, saveplot=True, title='Bandwidth', ylabel='Bandwidth (octave)')
    
    peak = list(tone_psth['peak_amplitude'])
    plot_map(patch_x, patch_y, peak, saveplot=True, title='Peak_Amplitude', ylabel='Peak Amplitude (mV)', cmap='viridis')
    #regression.regression_test(ortho, peak)
    fit = regression.regression_poly(ortho, peak, degree=1)
    plot_ortho(ortho, peak, fit, saveplot=True, title='Peak_Amplitude', ylabel='Peak Amplitude (mV)')
    
    t2p = list(tone_psth['time_to_peak'])
    plot_map(patch_x, patch_y, t2p, saveplot=True, title='Time to Peak', ylabel='Time to Peak (ms)', cmap='viridis')
    #regression.regression_test(ortho, t2p)
    fit = regression.regression_poly(ortho, t2p, degree=1)
    plot_ortho(ortho, t2p, fit, saveplot=True, title='Time to Peak', ylabel='Time to Peak (ms)')
    
    HWFM = list(tone_psth['HWFM'])
    plot_map(patch_x, patch_y, HWFM, saveplot=True, title='FMHW', ylabel='FMHW (ms)', cmap='viridis')
    #regression.regression_test(ortho, HWFM)
    fit = regression.regression_poly(ortho, HWFM, degree=1)
    plot_ortho(ortho, HWFM, fit, saveplot=True, title='FMHW', ylabel='FMHW (ms)')
    
    peak_end = list(tone_psth['peak_end'])
    plot_map(patch_x, patch_y, peak_end, saveplot=True, title='Peak_End', ylabel='ms', cmap='viridis')
    #regression.regression_test(ortho, peak_end)
    fit = regression.regression_poly(ortho, peak_end, degree=2)
    plot_ortho(ortho, peak_end, fit, saveplot=True, title='Peak_End', ylabel='ms')
    
    on_area = np.array(list(tone_psth['tone_area']))/1000
    plot_map(patch_x, patch_y, on_area, saveplot=True, title='tone_on_area', ylabel='Peri-Stimulus Charge (s*mV)', cmap='viridis')
    #regression.regression_test(ortho, on_area)
    fit = regression.regression_poly(ortho, on_area, degree=1)
    plot_ortho(ortho, on_area, fit, saveplot=True, title='tone_on_area', ylabel='Peri-Stimulus Charge (s*mV)')
    
    off_area = np.array(list(tone_psth['offtone_area']))/1000
    plot_map(patch_x, patch_y, off_area, saveplot=True, title='tone_off_area', ylabel='Post-Stimulus Charge (s*mV)', cmap='viridis')
    #regression.regression_test(ortho, off_area)
    fit = regression.regression_poly(ortho, off_area, degree=1)
    plot_ortho(ortho, off_area, fit, saveplot=True, title='tone_off_area', ylabel='Post-Stimulus Charge (s*mV)')
    

if lsfm_analysis:
    coords = pd.read_excel('mapping_coordinate.xlsx', sheet_name='coords')
    lsfm_psth_inBF = pd.read_csv('lsfm_psth_para_inBF.csv')
    lsfm_psth_exBF = pd.read_csv('lsfm_psth_para_exBF.csv')
    
    mouseIDs = list(lsfm_psth_inBF['mouseid'])
    sites = list(lsfm_psth_inBF['patch_site'])
    patch_x, patch_y, ortho = [],[],[]
    for i,m in enumerate(mouseIDs):
        site = f'Patch_{sites[i]}'
        patch_x.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].x.item())
        patch_y.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].y.item())
        ortho.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].orthogonal.item())
        
    """sweeped bf"""
    peak = list(lsfm_psth_inBF['peak_amplitude'])
    plot_map(patch_x, patch_y, peak, saveplot=True, title='Peak_Amplitude_inBF', ylabel='Onset Peak Amplitude (mV)', vmin=-3, vmax=9)
    #regression.regression_test(ortho, peak)
    fit = regression.regression_poly(ortho, peak, degree=1)
    plot_ortho(ortho, peak, fit, saveplot=True, title='Peak_Amplitude_inBF', ylabel='Onset Peak Amplitude (mV)')
    
    t2p = list(lsfm_psth_inBF['time_to_peak'])
    plot_map(patch_x, patch_y, t2p, saveplot=True, title='Time_to_Peak_inBF', ylabel='Time to Onset Peak (ms)')
    #regression.regression_test(ortho, t2p)
    fit = regression.regression_poly(ortho, t2p, degree=2)
    plot_ortho(ortho, t2p, fit, saveplot=True, title='Time_to_Peak_inBF', ylabel='Time to Onset Peak (ms)')
    
    HWFM = np.array(list(lsfm_psth_inBF['HWFM']))
    plot_map(patch_x, patch_y, HWFM, saveplot=True, title='FMHW_inBF', ylabel='FMHW (ms)')
    #regression.regression_test(ortho, HWFM)
    fit = regression.regression_poly(ortho, HWFM, degree=1)
    plot_ortho(ortho, HWFM, fit, saveplot=True, title='FMHW_inBF', ylabel='FMHW (ms)')
    
    sustain = list(lsfm_psth_inBF['sustain'])
    plot_map(patch_x, patch_y, sustain, saveplot=True, title='Average_Sustain_inBF', ylabel='Avg Sustain Potential (mV)', diverge=True)
    #regression.regression_test(ortho, sustain)
    fit = regression.regression_poly(ortho, sustain, degree=1)
    plot_ortho(ortho, sustain, fit, saveplot=True, title='Average_Sustain_inBF', ylabel='Avg Sustain Potential (mV)')
    
    offpeak = list(lsfm_psth_inBF['offpeak_amplitude'])
    plot_map(patch_x, patch_y, offpeak, saveplot=True, title='Offpeak_Amplitude_inBF', ylabel='Offset Peak Amplitude (mV)', vmin=0, vmax=8)
    #regression.regression_test(ortho, offpeak)
    fit = regression.regression_poly(ortho, offpeak, degree=1)
    plot_ortho(ortho, offpeak, fit, saveplot=True, title='Offpeak_Amplitude_inBF', ylabel='Offset Peak Amplitude (mV)')
    
    t2offp = list(lsfm_psth_inBF['time_to_offpeak'])
    plot_map(patch_x, patch_y, t2offp, saveplot=True, title='Time_to_Offpeak_inBF', ylabel='Time to Offset Peak (ms)')
    #regression.regression_test(ortho, t2offp)
    fit = regression.regression_poly(ortho, t2offp, degree=1)
    plot_ortho(ortho, t2offp, fit, saveplot=True, title='Time_to_Offpeak_inBF', ylabel='Time to Offset Peak (ms)')
    
    ratio = np.array(offpeak)/np.array(peak)
    plot_map(patch_x, patch_y, ratio, saveplot=True, title='Peak_ratio_inBF', ylabel='Offset/Onset Ratio')
    #regression.regression_test(ortho, ratio)
    fit = regression.regression_poly(ortho, ratio, degree=1)
    plot_ortho(ortho, ratio, fit, saveplot=True, title='Peak_ratio_inBF', ylabel='Offset/Onset Ratio')
    
    
    """not sweeped bf"""
    peak = list(lsfm_psth_exBF['peak_amplitude'])
    plot_map(patch_x, patch_y, peak, saveplot=True, title='Peak_Amplitude_exBF', ylabel='Onset Peak Amplitude (mV)', vmin=-3, vmax=9)
    #regression.regression_test(ortho, peak)
    fit = regression.regression_poly(ortho, peak, degree=1)
    plot_ortho(ortho, peak, fit, saveplot=True, title='Peak_Amplitude_exBF', ylabel='Onset Peak Amplitude (mV)')
    
    t2p = list(lsfm_psth_exBF['time_to_peak'])
    plot_map(patch_x, patch_y, t2p, saveplot=True, title='Time_to_Peak_exBF', ylabel='Time to Onset Peak (ms)')
    #regression.regression_test(ortho, t2p)
    fit = regression.regression_poly(ortho, t2p, degree=2)
    plot_ortho(ortho, t2p, fit, saveplot=True, title='Time_to_Peak_exBF', ylabel='Time to Onset Peak (ms)')
    
    HWFM = np.array(list(lsfm_psth_exBF['HWFM']))
    plot_map(patch_x, patch_y, HWFM, saveplot=True, title='FMHW_exBF', ylabel='FMHW (ms)')
    #regression.regression_test(ortho, HWFM)
    fit = regression.regression_poly(ortho, HWFM, degree=1)
    plot_ortho(ortho, HWFM, fit, saveplot=True, title='FMHW_exBF', ylabel='FMHW (ms)')
    
    sustain = list(lsfm_psth_exBF['sustain'])
    plot_map(patch_x, patch_y, sustain, saveplot=True, title='Average_Sustain_exBF', ylabel='Avg Sustain Potential (mV)', diverge=True)
    #regression.regression_test(ortho, sustain)
    fit = regression.regression_poly(ortho, sustain, degree=1)
    plot_ortho(ortho, sustain, fit, saveplot=True, title='Average_Sustain_exBF', ylabel='Avg Sustain Potential (mV)')
    
    offpeak = list(lsfm_psth_exBF['offpeak_amplitude'])
    plot_map(patch_x, patch_y, offpeak, saveplot=True, title='Offpeak_Amplitude_exBF', ylabel='Offset Peak Amplitude (mV)', vmin=0, vmax=8)
    #regression.regression_test(ortho, offpeak)
    fit = regression.regression_poly(ortho, offpeak, degree=1)
    plot_ortho(ortho, offpeak, fit, saveplot=True, title='Offpeak_Amplitude_exBF', ylabel='Offset Peak Amplitude (mV)')
    
    t2offp = list(lsfm_psth_exBF['time_to_offpeak'])
    plot_map(patch_x, patch_y, t2offp, saveplot=True, title='Time_to_Offpeak_exBF', ylabel='Time to Offset Peak (ms)')
    #regression.regression_test(ortho, t2offp)
    fit = regression.regression_poly(ortho, t2offp, degree=1)
    plot_ortho(ortho, t2offp, fit, saveplot=True, title='Time_to_Offpeak_exBF', ylabel='Time to Offset Peak (ms)')
    
    ratio = np.array(offpeak)/np.array(peak)
    plot_map(patch_x, patch_y, ratio, saveplot=True, title='Peak_Ratio_exBF', ylabel='Offset/Onset Ratio')
    #regression.regression_test(ortho, ratio)
    fit = regression.regression_poly(ortho, ratio, degree=1)
    plot_ortho(ortho, ratio, fit, saveplot=True, title='Peak_Ratio_exBF', ylabel='Offset/Onset Ratio')


if spike_analysis:
    coords = pd.read_excel('mapping_coordinate.xlsx', sheet_name='coords')
    lsfm_psth_inBF = pd.read_csv('lsfm_psth_para_inBF.csv')
    df_spike = pd.read_csv('spiking_count.csv')
    
    mouseIDs = list(lsfm_psth_inBF['mouseid'])
    sites = list(lsfm_psth_inBF['patch_site'])
    patch_x, patch_y, ortho = [],[],[]
    for i,m in enumerate(mouseIDs):
        site = f'Patch_{sites[i]}'
        patch_x.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].x.item())
        patch_y.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].y.item())
        ortho.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].orthogonal.item())
    
    total_spike = list(df_spike['total_spikes'])
    plot_map(patch_x, patch_y, total_spike, saveplot=True, title='Total Spikes', ylabel='Total Spikes (count)', vmax=300)
    
    rate_inbf = list(df_spike['rate_inbf'])
    plot_map(patch_x, patch_y, rate_inbf, saveplot=True, title='Spike Rate, in RF', ylabel='Spikes/Stimulus (count)', vmax=2)
    #regression.regression_test(ortho, rate_inbf)
    fit = regression.regression_poly(ortho, rate_inbf, degree=1)
    plot_ortho(ortho, rate_inbf, fit, saveplot=True, title='Spike Rate, in RF', ylabel='Spikes/Stimulus (count)', vmax=2)
    
    rate_exbf = list(df_spike['rate_exbf'])
    plot_map(patch_x, patch_y, rate_exbf, saveplot=True, title='Spike Rate, out RF', ylabel='Spikes/Stimulus (count)', vmax=2)
    #regression.regression_test(ortho, rate_exbf)
    fit = regression.regression_poly(ortho, rate_exbf, degree=1)
    plot_ortho(ortho, rate_exbf, fit, saveplot=True, title='Spike Rate, out RF', ylabel='Spikes/Stimulus (count)', vmax=2)


if map_correlation:
    coords = pd.read_excel('mapping_coordinate.xlsx', sheet_name='coords')
    df2 = pd.read_csv('patch_list_with_bf.csv', dtype={'date':str, '#':str})
    idx = df2.index[(df2['type']=='Pure Tones') & (df2['project']=='Ic_map') & (df2['hard_exclude']!='exclude') 
                    & (df2['mouse_id']!='TG150') & (df2['mouse_id']!='TG147')]
    
    
    df_corr = pd.read_csv('max_correlation_tone.csv')
    mouse_1 = df_corr.loc[1].combination_1[:5]
    file_1 = df_corr.loc[1].combination_1[6:]
    
    
if para_sep_analysis:
    coords = pd.read_excel('mapping_coordinate.xlsx', sheet_name='coords')
    
    """center frequency"""
    para_cf = pd.read_csv('para_sep_cf.csv')
    
    mouseIDs = list(para_cf['mouseid'])
    sites = list(para_cf['patch_site'])
    patch_x, patch_y, ortho = [],[],[]
    for i,m in enumerate(mouseIDs):
        site = f'Patch_{sites[i]}'
        patch_x.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].x.item())
        patch_y.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].y.item())
        ortho.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].orthogonal.item())
        
    on_peak = list(para_cf['on_peak'])
    plot_map(patch_x, patch_y, on_peak, saveplot=saveplot, title='Onset Peak Amplitude -cf-', ylabel='Onset Peak Amplitude cf slope', vmin=-3, vmax=9)
    #regression.regression_test(ortho, peak)
    fit = regression.regression_poly(ortho, on_peak, degree=1)
    plot_ortho(ortho, on_peak, fit, saveplot=saveplot, title='Onset Peak Amplitude -cf-', ylabel='Onset Peak Amplitude cf slope')
    
    on_loc = list(para_cf['on_loc'])
    plot_map(patch_x, patch_y, on_loc, saveplot=saveplot, title='Onset Peak Location -cf-', ylabel='Onset Peak Location cf slope')
    #regression.regression_test(ortho, t2p)
    fit = regression.regression_poly(ortho, on_loc, degree=2)
    plot_ortho(ortho, on_loc, fit, saveplot=saveplot, title='Onset Peak Location -cf-', ylabel='Onset Peak Location cf slope')
    
    on_charge = np.array(list(para_cf['on_charge']))
    plot_map(patch_x, patch_y, on_charge, saveplot=saveplot, title='Onset Charge -cf-', ylabel='Onset Charge cf slope')
    #regression.regression_test(ortho, HWFM)
    fit = regression.regression_poly(ortho, on_charge, degree=1)
    plot_ortho(ortho, on_charge, fit, saveplot=saveplot, title='Onset Charge -cf-', ylabel='Onset Charge cf slope')
    
    sustain = list(para_cf['sustain'])
    plot_map(patch_x, patch_y, sustain, saveplot=saveplot, title='Average_Sustain -cf-', ylabel='Avg Sustain Potential cf slope', diverge=True)
    #regression.regression_test(ortho, sustain)
    fit = regression.regression_poly(ortho, sustain, degree=1)
    plot_ortho(ortho, sustain, fit, saveplot=saveplot, title='Average_Sustain -cf-', ylabel='Avg Sustain Potential cf slope')
    
    off_peak = list(para_cf['off_peak'])
    plot_map(patch_x, patch_y, off_peak, saveplot=saveplot, title='Offset Peak Amplitude -cf-', ylabel='Offset Peak Amplitude cf slope', vmin=0, vmax=8)
    #regression.regression_test(ortho, offpeak)
    fit = regression.regression_poly(ortho, off_peak, degree=1)
    plot_ortho(ortho, off_peak, fit, saveplot=saveplot, title='Offset Peak Amplitude -cf-', ylabel='Offset Peak Amplitude cf slope')
    
    off_loc = list(para_cf['off_loc'])
    plot_map(patch_x, patch_y, off_loc, saveplot=saveplot, title='Offset Peak Location -cf-', ylabel='Offset Peak Location cf slope')
    #regression.regression_test(ortho, t2offp)
    fit = regression.regression_poly(ortho, off_loc, degree=1)
    plot_ortho(ortho, off_loc, fit, saveplot=saveplot, title='Offset Peak Location -cf-', ylabel='Offset Peak Location cf slope')
    
    off_charge = np.array(list(para_cf['off_charge']))
    plot_map(patch_x, patch_y, off_charge, saveplot=saveplot, title='Offset Charge -cf-', ylabel='Offset Charge cf slope')
    #regression.regression_test(ortho, HWFM)
    fit = regression.regression_poly(ortho, off_charge, degree=1)
    plot_ortho(ortho, off_charge, fit, saveplot=saveplot, title='Offset Charge -cf-', ylabel='Offset Charge cf slope')
    
    
    """bandwidth"""
    para_bw = pd.read_csv('para_sep_bw.csv')
    
    mouseIDs = list(para_bw['mouseid'])
    sites = list(para_bw['patch_site'])
    patch_x, patch_y, ortho = [],[],[]
    for i,m in enumerate(mouseIDs):
        site = f'Patch_{sites[i]}'
        patch_x.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].x.item())
        patch_y.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].y.item())
        ortho.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].orthogonal.item())
        
    on_peak = list(para_bw['on_peak'])
    plot_map(patch_x, patch_y, on_peak, saveplot=saveplot, title='Onset Peak Amplitude -bw-', ylabel='Onset Peak Amplitude bw slope', vmin=-3, vmax=9)
    #regression.regression_test(ortho, peak)
    fit = regression.regression_poly(ortho, on_peak, degree=1)
    plot_ortho(ortho, on_peak, fit, saveplot=saveplot, title='Onset Peak Amplitude -bw-', ylabel='Onset Peak Amplitude bw slope')
    
    on_loc = list(para_bw['on_loc'])
    plot_map(patch_x, patch_y, on_loc, saveplot=saveplot, title='Onset Peak Location -bw-', ylabel='Onset Peak Location bw slope')
    #regression.regression_test(ortho, t2p)
    fit = regression.regression_poly(ortho, on_loc, degree=2)
    plot_ortho(ortho, on_loc, fit, saveplot=saveplot, title='Onset Peak Location -bw-', ylabel='Onset Peak Location bw slope')
    
    on_charge = np.array(list(para_bw['on_charge']))
    plot_map(patch_x, patch_y, on_charge, saveplot=saveplot, title='Onset Charge -bw-', ylabel='Onset Charge bw slope')
    #regression.regression_test(ortho, HWFM)
    fit = regression.regression_poly(ortho, on_charge, degree=1)
    plot_ortho(ortho, on_charge, fit, saveplot=saveplot, title='Onset Charge -bw-', ylabel='Onset Charge bw slope')
    
    sustain = list(para_bw['sustain'])
    plot_map(patch_x, patch_y, sustain, saveplot=saveplot, title='Average_Sustain -bw-', ylabel='Avg Sustain Potential bw slope', diverge=True)
    #regression.regression_test(ortho, sustain)
    fit = regression.regression_poly(ortho, sustain, degree=1)
    plot_ortho(ortho, sustain, fit, saveplot=saveplot, title='Average_Sustain -bw-', ylabel='Avg Sustain Potential bw slope')
    
    off_peak = list(para_bw['off_peak'])
    plot_map(patch_x, patch_y, off_peak, saveplot=saveplot, title='Offset Peak Amplitude -bw-', ylabel='Offset Peak Amplitude bw slope', vmin=0, vmax=8)
    #regression.regression_test(ortho, offpeak)
    fit = regression.regression_poly(ortho, off_peak, degree=1)
    plot_ortho(ortho, off_peak, fit, saveplot=saveplot, title='Offset Peak Amplitude -bw-', ylabel='Offset Peak Amplitude bw slope')
    
    off_loc = list(para_bw['off_loc'])
    plot_map(patch_x, patch_y, off_loc, saveplot=saveplot, title='Offset Peak Location -bw-', ylabel='Offset Peak Location bw slope')
    #regression.regression_test(ortho, t2offp)
    fit = regression.regression_poly(ortho, off_loc, degree=1)
    plot_ortho(ortho, off_loc, fit, saveplot=saveplot, title='Offset Peak Location -bw-', ylabel='Offset Peak Location bw slope')
    
    off_charge = np.array(list(para_bw['off_charge']))
    plot_map(patch_x, patch_y, off_charge, saveplot=saveplot, title='Offset Charge -bw-', ylabel='Offset Charge bw slope')
    #regression.regression_test(ortho, HWFM)
    fit = regression.regression_poly(ortho, off_charge, degree=1)
    plot_ortho(ortho, off_charge, fit, saveplot=saveplot, title='Offset Charge -bw-', ylabel='Offset Charge bw slope')


    """modulation rate"""
    para_mr = pd.read_csv('para_sep_mr.csv')
    
    mouseIDs = list(para_mr['mouseid'])
    sites = list(para_mr['patch_site'])
    patch_x, patch_y, ortho = [],[],[]
    for i,m in enumerate(mouseIDs):
        site = f'Patch_{sites[i]}'
        patch_x.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].x.item())
        patch_y.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].y.item())
        ortho.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].orthogonal.item())
        
    on_peak = list(para_mr['on_peak'])
    plot_map(patch_x, patch_y, on_peak, saveplot=saveplot, title='Onset Peak Amplitude -mr-', ylabel='Onset Peak Amplitude mr slope', vmin=-3, vmax=9)
    #regression.regression_test(ortho, peak)
    fit = regression.regression_poly(ortho, on_peak, degree=1)
    plot_ortho(ortho, on_peak, fit, saveplot=saveplot, title='Onset Peak Amplitude -mr-', ylabel='Onset Peak Amplitude mr slope')
    
    on_loc = list(para_mr['on_loc'])
    plot_map(patch_x, patch_y, on_loc, saveplot=saveplot, title='Onset Peak Location -mr-', ylabel='Onset Peak Location mr slope')
    #regression.regression_test(ortho, t2p)
    fit = regression.regression_poly(ortho, on_loc, degree=2)
    plot_ortho(ortho, on_loc, fit, saveplot=saveplot, title='Onset Peak Location -mr-', ylabel='Onset Peak Location mr slope')
    
    on_charge = np.array(list(para_mr['on_charge']))
    plot_map(patch_x, patch_y, on_charge, saveplot=saveplot, title='Onset Charge -mr-', ylabel='Onset Charge mr slope')
    #regression.regression_test(ortho, HWFM)
    fit = regression.regression_poly(ortho, on_charge, degree=1)
    plot_ortho(ortho, on_charge, fit, saveplot=saveplot, title='Onset Charge -mr-', ylabel='Onset Charge mr slope')
    
    sustain = list(para_mr['sustain'])
    plot_map(patch_x, patch_y, sustain, saveplot=saveplot, title='Average_Sustain -mr-', ylabel='Avg Sustain Potential mr slope', diverge=True)
    #regression.regression_test(ortho, sustain)
    fit = regression.regression_poly(ortho, sustain, degree=1)
    plot_ortho(ortho, sustain, fit, saveplot=saveplot, title='Average_Sustain -mr-', ylabel='Avg Sustain Potential mr slope')
    
    off_peak = list(para_mr['off_peak'])
    plot_map(patch_x, patch_y, off_peak, saveplot=saveplot, title='Offset Peak Amplitude -mr-', ylabel='Offset Peak Amplitude mr slope', vmin=0, vmax=8)
    #regression.regression_test(ortho, offpeak)
    fit = regression.regression_poly(ortho, off_peak, degree=1)
    plot_ortho(ortho, off_peak, fit, saveplot=saveplot, title='Offset Peak Amplitude -mr-', ylabel='Offset Peak Amplitude mr slope')
    
    off_loc = list(para_mr['off_loc'])
    plot_map(patch_x, patch_y, off_loc, saveplot=saveplot, title='Offset Peak Location -mr-', ylabel='Offset Peak Location mr slope')
    #regression.regression_test(ortho, t2offp)
    fit = regression.regression_poly(ortho, off_loc, degree=1)
    plot_ortho(ortho, off_loc, fit, saveplot=saveplot, title='Offset Peak Location -mr-', ylabel='Offset Peak Location mr slope')
    
    off_charge = np.array(list(para_mr['off_charge']))
    plot_map(patch_x, patch_y, off_charge, saveplot=saveplot, title='Offset Charge -mr-', ylabel='Offset Charge mr slope')
    #regression.regression_test(ortho, HWFM)
    fit = regression.regression_poly(ortho, off_charge, degree=1)
    plot_ortho(ortho, off_charge, fit, saveplot=saveplot, title='Offset Charge -mr-', ylabel='Offset Charge mr slope') 
        