import pandas as pd
import numpy as np
from sklearn.preprocessing import PolynomialFeatures, StandardScaler
from sklearn.model_selection import LeaveOneOut, cross_val_score
from sklearn.pipeline import make_pipeline
from sklearn.base import BaseEstimator, RegressorMixin
from sklearn.metrics import r2_score, make_scorer
import nemos as nmo


# --- Wrapper for NeMoS GLM ---
class NeMoSRegressor(BaseEstimator, RegressorMixin):
    def __init__(self, observation_model="gaussian", max_iter=1000):
        self.observation_model = observation_model
        self.max_iter = max_iter
        self.model = None

    def fit(self, X, y):
        y_2d = y.reshape(-1, 1)
        self.model = nmo.glm.GLM(
            observation_model=self.observation_model,
            max_iter=self.max_iter
        )
        self.model.fit(X, y_2d)
        return self

    def predict(self, X):
        return self.model.predict(X).ravel()

    def score(self, X, y):
        return r2_score(y, self.predict(X))


# --- Pipelines for each model type ---
def build_pipeline(model_type="linear"):
    if model_type == "linear":
        poly = PolynomialFeatures(degree=1, include_bias=False)
    elif model_type == "quadratic":
        poly = PolynomialFeatures(degree=2, include_bias=False, interaction_only=False)
    elif model_type == "interaction":
        poly = PolynomialFeatures(degree=2, include_bias=False, interaction_only=True)
    else:
        raise ValueError(f"Unknown model_type: {model_type}")

    return make_pipeline(
        StandardScaler(),
        poly,
        NeMoSRegressor(observation_model="gaussian")
    )


# --- Main analysis function with LOO ---
def run_nemos_models_loo(df):
    param_cols = ['para1', 'para2', 'para3']
    feature_cols = [c for c in df.columns if c not in ['filename', 'x', 'y'] + param_cols]

    results = []
    loo = LeaveOneOut()
    scorer = make_scorer(r2_score)

    for neuron_id in df['filename'].unique():
        neuron_data = df[df['filename'] == neuron_id]
        X = neuron_data[param_cols].values

        for feature in feature_cols:
            y = neuron_data[feature].values
            if np.isnan(y).all() or np.var(y) == 0:
                continue

            for model_type in ["linear", "quadratic", "interaction"]:
                pipe = build_pipeline(model_type)

                # LOO CV for test R²
                test_r2_scores = cross_val_score(pipe, X, y, cv=loo, scoring=scorer)
                mean_test_r2 = np.mean(test_r2_scores)

                # Train on full data to get train R²
                pipe.fit(X, y)
                train_r2 = pipe.score(X, y)

                results.append({
                    "neuron_id": neuron_id,
                    "feature": feature,
                    "model_type": model_type,
                    "train_r2": train_r2,
                    "test_r2": mean_test_r2,
                    "n_samples": len(y)
                })

                print(f"{neuron_id}-{feature}-{model_type}: "
                      f"Train R²={train_r2:.3f}, Test R²(LOO)={mean_test_r2:.3f}")

    return pd.DataFrame(results)


# --- Example usage ---
if __name__ == "__main__":
    # df = pd.read_csv("your_data.csv")
    results = run_nemos_models_loo(df)
    print(results.head())