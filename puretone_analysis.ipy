from TDMS_ver5 import Tdms_V1, Tdms_V2
import numpy as np
import os
import matplotlib.pyplot as plt
import matplotlib.colors as colors
import matplotlib
%matplotlib inline
from pathlib import Path
from scipy import signal
from scipy import stats
from scipy import interpolate
import scipy.io
import TFTool
import pandas as pd
import tone
import math
from tone import PureTone

if  __name__ == "__main__":
    df = pd.read_csv('patch_list_E.csv', dtype={'date':str, '#':str})
    idx_puretone = df.index[(df['type']=='Pure Tones') & (df['project']=='Ic_map') & (df['hard_exclude']!='exclude')]
# =============================================================================
#     #idx_tone = [26,29,31,34,36,44,48,61,72,75,77,80,83,84,85,88,90,93,94,96,99]
#     idx_tone = [26,29,31,34,36,44,61,72,75,77,80,83,84,85,88,90,93,96]
#     exclude = [0,1,2,3,4,5,6,8,9,12,13,15,16,17,18,22,38,39,41,43,45,47,48,50,52,53,55,57,64,66,68,69,79]
#     cell_note = pd.read_csv('cell_note_all.csv')
#     idx_tone = [26,29]
#     #frequency in octave difference
#     frequency  = np.linspace(-5.,5.,num=301)
#     #pre-create 2d array to store response of resp_mesh from all neurons
#     resp_all_pos_2bf = np.array([[0.0]*len(frequency)]*301)
#     mouseid_all, filename_all, bf_all, width_all, max_intensity, time_to_peak, site_all =[],[],[],[],[],[],[]
# =============================================================================
    
    ##new index to exclude no-tuning
    #idx_puretone = df.index[(df['type']=='Pure Tones') & (df['project']=='Ic_map') & (df['hard_exclude']!='exclude') & (df['tuning_check']!='exclude')]
    #tone.get_info(idx_puretone)    
    
    idx_puretone = df.index[(df['type']=='Pure Tones') & (df['final_inclusion']=='yes')]
    
    psth_para_list, psth_store = [],[]
    mouseIDs, filenames, patch_sites, bfs, bandwidths = [],[],[],[],[]
    bf_levels, band_levels, left_levels, right_levels = [],[],[],[]
    psth_neurons=[]
    
    #df_loc = 200       
    #if df_loc == 200:
    for df_loc in idx_puretone:
        #i = int([i for i,a in enumerate(idx_tone) if a == df_loc][0])
        filename = df['filename'][df_loc]
        version = df['Py_version'][df_loc]
        mouseID = df['mouse_id'][df_loc]
        fullname = mouseID+'_'+filename
        site = df['patch_site'][df_loc]
        
        data = np.load(f'{filename}.npy', allow_pickle=True)
        resp = data.item()['resp']
        loud = sorted(set(data.item()['loud']))
        freq = sorted(set(data.item()['freq']))
        try:
            loud.remove(0.0)
            freq.remove(0.0)
        except:
            pass
                
        para = data.item()['para']
        
        tone1 = PureTone(resp, para, mouseID, filename)
        _, _, tuning_trace, _ = tone1.get_bf(output=True)
        tone1.get_bandwidth()
        #tone1.plot_tuning_trace()
        tone1.plot_tuning(on_off='on', saveplot=False)
        tone1.plot_PSTH_wwobfband(filter60=True, saveplot=True)

        mouseIDs.append(mouseID)
        filenames.append(filename)
        
        psth = tone1.get_psth()[0]
        base = np.mean(psth[:500])
        peak = np.max(psth[500:3000]) - base
        latency = np.argmax(psth[500:3000])-500
        peri_charge = np.sum(psth[500:3000])/1000
        post_charge = np.sum(psth[3000:5500])/1000
        
        psth_neurons.append([mouseID, filename, site, tone1.bf, tone1.bandwidth, peak, latency, peri_charge, post_charge])
    
    neurons_arr = np.array(psth_neurons)

    # Create DataFrames
    category_labels = ['mouseID', 'filename', 'patch_site', 'bf', 'bandwidth',
                       'peak', 'latency', 'peri_charge', 'post_charge']

    tone_cat = pd.DataFrame(neurons_arr, columns=category_labels)


    # Write to Excel with two sheets
    with pd.ExcelWriter("tone_PSTH_category_new.xlsx", engine="openpyxl") as writer:
        tone_cat.to_excel(writer, sheet_name="inband")     
        
# =============================================================================
#         ## read data from tdms file
#         fdir = df['path'][df_loc]
#         filename = df['filename'][df_loc]
#         version = df['Py_version'][df_loc]
#         if version == 1:
#             t = Tdms_V1()
#             t.loadtdms(fdir, protocol=1, load_sound=True, precise_timing=True)
#         if version == 2 or version == 3:
#             t = Tdms_V2()
#             t.loadtdms(fdir, protocol=1, load_sound=True)
#             
# 
#         para = t.para
#         resp = np.array(t.resp_dpk)
#         stim = t.sound
#         LabView_ver = t.version
#         
#         if LabView_ver == 1.5:
#             resp_merge, para_merge = tone.resp_merge(resp, para)
#             loud, freq = zip(*para_merge)
#         else:
#             resp_merge = resp
#             loud, freq, _ = zip(*para)
#             
#         data={'resp':resp_merge, 'stim':stim, 'para':para, 'loud':loud, 'freq':freq, 'Ver':LabView_ver}
#         np.save(filename, data)
# =============================================================================
        
# =============================================================================
#     ##Get category value from PSTH of all resp
#     mouseIDs, filenames, patch_sites, bfs, bandwidths, band_lefts, band_rights, psth_categories = [],[],[],[],[],[],[],[]
#     df_psth = pd.read_excel('psth_category_window_tone.xlsx')
#     for df_loc in list(df_psth['df_loc']):
#         filename = df['filename'][df_loc]
#         version = df['Py_version'][df_loc]
#         mouseID = df['mouse_id'][df_loc]
#         fullname = mouseID+'_'+filename
#         site = df['patch_site'][df_loc]
#         data = np.load(f'{filename}.npy', allow_pickle=True)
#         resp = data.item()['resp']
#         para = data.item()['para']
#         
#         tone1 = PureTone(resp, para, mouseID, filename)
#         tone1.get_bf()
#         tone1.get_bandwidth()
#         tone1.get_resp_wwobfband()
#         psth_y = np.mean(tone1.bfband['resp_in'], axis=0)
#         
#         df_psth_para = df_psth[(df_psth['df_loc']==df_loc)]
#         onset_y = psth_y[500]
#         offset_y = psth_y[3000]
#         peak_amp = (psth_y[df_psth_para['peak']] - psth_y[df_psth_para['peak_start']]).item()
#         time2peak = (df_psth_para['peak'].item() - 500)/25
#         FWHM = (df_psth_para['half_amp_end'] - df_psth_para['half_amp_start']).item()/25
#         peak_end = (df_psth_para['peak_transition'].item()-500)/25
#         on_area = np.sum(psth_y[500:3000])
#         off_area = np.sum(psth_y[3000:])
#     
#         psth_categories.append([onset_y, offset_y, peak_amp, time2peak, FWHM, peak_end, on_area, off_area])
#         
#         filenames.append(filename)
#         mouseIDs.append(mouseID)
#         patch_sites.append(site)
#         bandwidths.append(tone1.bandwidth)
#         band_lefts.append(tone1.band_left)
#         band_rights.append(tone1.band_right)
#         bfs.append(tone1.bf)
#         
#     psth_categories = np.array(psth_categories).swapaxes(0,1)
#     data = {'mouseid':mouseIDs, 'filename':filenames, 'patch_site':patch_sites, 'best_frequency':bfs,
#             'bandwidth':bandwidths, 'band_left':band_lefts, 'band_right':band_rights, 'onset': psth_categories[0], 'offset': psth_categories[1], 
#             'peak_amplitude': psth_categories[2], 'time_to_peak':  psth_categories[3], 
#             'FWHM': psth_categories[4], 'peak_end': psth_categories[5], 
#             'tone_area': psth_categories[6], 'offtone_area': psth_categories[7]}
#       
#     psth_df = pd.DataFrame(data)
#     psth_df.to_csv('tone_psth_category_value_new.csv', index=False)
# =============================================================================
        
# =============================================================================
#         ##plot psth in browser to get xy
#         import plotly.io as pio
#         import plotly.express as px
#         import plotly.graph_objects as go
#         pio.renderers.default='browser'
#         
#         pk_x = np.argmax(psth_bf[1][:3000])
#         pk_y = psth_bf[1][pk_x]
#         off_x = np.argmax(psth_bf[1][3000:])+3000
#         off_y = psth_bf[1][off_x]
#         half = pk_y/2
#         decay = pk_y/math.e
#         fig = px.scatter(x=psth_bf[0], y=psth_bf[1], title=f'{df_loc}_{mouseID}_{filename}_in_bf')
#         fig.add_trace(go.Scatter(x=[pk_x], y=[pk_y], mode = 'markers', 
#                                  name="Peak", hoverinfo="skip", marker_size = 15))
#         fig.add_trace(go.Scatter(x=[off_x], y=[off_y], mode = 'markers', 
#                                  name="Off_Peak", hoverinfo="skip", marker_size = 15))
#         fig.add_annotation(x=pk_x, y=pk_y, text=f'{pk_x}, {pk_y}', showarrow=False, yshift=25)
#         fig.add_annotation(x=off_x, y=off_y, text=f'{off_x}, {off_y}', showarrow=False, yshift=25)
#         fig.add_vline(x=500, line_width=2, line_dash='dash')
#         fig.add_vline(x=3000, line_width=2, line_dash='dash')
#         fig.add_hline(y=half, line_width=2, line_dash='dash')
#         fig.add_hline(y=decay, line_width=2, line_dash='dash', line_color='red')
#         fig.show()
# =============================================================================
        

# =============================================================================
#         ## output tone psth para
#         mouseid_all.append(mouseID)
#         filename_all.append(filename)
#         bf_all.append(bf70)
#         width_all.append(x[3])
#         max_intensity.append(np.max(yy))
#         time_to_peak.append((np.argmax(yy)-500)/25)
#         site_all.append(site)
# =============================================================================
    
        
# =============================================================================
#         #resp_pas = TFTool.pascal_filter(resp_on)
#         resp_nan = set_hyper2nan(resp_filt)
#         resp_pos = set_hyper2zero(resp_on)
#         
#         
#         
#         bf_loud = []
#         for i,x in enumerate(resp_pos):
#             bf_loud.append(puretone.center_mass_layer(x, freq))
#         #resp_sum = np.sum(resp_pos, axis=1)    
#         
#         resp_oct2bf=[]
#         for i in range(len(loud)):        
#             resp_oct2bf.append(octave2bf(bf_loud[i], freq))
#             
#         resp_mesh = np.reshape(resp, (len(loud),len(freq),-1))
#         
#         #i for layering loudness, j for iterate through frequency
#         for i in range(len(loud)):
#             oct2bf = octave2bf(bf_loud[i], freq)
#             for j in range(len(freq)):
#                 index = min_index(frequency, oct2bf[j])
#                 base = resp_all_pos_2bf[i][index]
#                 arr = np.array([base, resp_pos[i][j]])
#                 resp_all_pos_2bf[i][index] = np.nanmean(arr)
# =============================================================================
                


        
        
        #bf = puretone.tunning(resp, para, filename=filename, set_x_intime=False, saveplot=False)
        #puretone.psth(resp, filename, set_x_intime=False, saveplot=False)
        #df_copy = df.copy()
        #df_copy['best_frequency'].iloc[df_loc] = bf
        #df.iloc[df_loc, df.columns.get_loc('best_frequency')] = bf['best_frequency']
        #df.iloc[df_loc, df.columns.get_loc('bandwidth')] = bf['bandwidth']
        #puretone.psth(resp, filename, set_x_intime=True, saveplot=True)
    
    #df.to_csv('patch_list_E_new.csv', index=False)
       
        
# =============================================================================
#     #get tone tuning properties for each level
#     all_lists = [bf_levels, band_levels, left_levels, right_levels]
#     from openpyxl import Workbook
#     # Create workbook
#     wb = Workbook()
#     sheet_names = ["bf", "bandwidth", "band_left", "band_right"]
#     headers = ['mouseID', 'filename', '40db', '50db', '60db', '70db', '80db']
#     
#     for idx, data_list in enumerate(all_lists):
#         # Create or select sheet
#         if idx == 0:
#             ws = wb.active
#             ws.title = sheet_names[idx]
#         else:
#             ws = wb.create_sheet(title=sheet_names[idx])
#     
#         # Write header
#         for col, header in enumerate(headers, start=1):
#             ws.cell(row=1, column=col, value=header)
#     
#         # Write transposed data
#         for row in range(34):
#             ws.cell(row=row+2, column=1, value=mouseIDs[row])                     # mouseID
#             ws.cell(row=row+2, column=2, value=filenames[row])                     # filename
#             for col in range(5):  # 5 values from e1 to e5
#                 ws.cell(row=row+2, column=col+3, value=data_list[row][col])  # 40db–80db
# 
#     # Save workbook
#     wb.save("tone_para_levels.xlsx")
# =============================================================================
    
          
        