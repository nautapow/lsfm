from TDMS_ver5 import Tdms_V1, Tdms_V2
import numpy as np
import os
import matplotlib.pyplot as plt
import matplotlib as mpl
from pathlib import Path
from scipy import signal
from scipy import stats
from scipy import interpolate
import scipy.io
import TFTool
import pandas as pd
import lsfm
import lsfm_psth
from lsfm_psth import Psth
import lsfm_slope
import math
import lsfm_strf
import plotly.io as pio
import plotly.express as px
import plotly.graph_objects as go
pio.renderers.default='browser'
%matplotlib inline
    
if  __name__ == "__main__":
    df = pd.read_csv('patch_list_E.csv', dtype={'date':str, '#':str})
    idx_lsfm = df.index[(df['type']=='Log sFM') & (df['project']=='Ic_map') & (df['hard_exclude']!='exclude')]
    #exclude = [20,21,32,33,40,42,54,56,58,59,53,65,67,70]
    #cell_note = pd.read_csv('cell_note_all.csv')
    #lsfm.resp_overcell(df, tlsfm, saveplot=False)
    #resp_cell = [[],[],[],[],[],[]]
    #band_cell_mean=[]
    #lsfm.best_lags()
# =============================================================================
#     bf = cell_note['best frequency']
#     lag_all = cell_note['best_lag_all']
#     lag_first = cell_note['best_lag_bf']
#     bf_scale = [i/1000 for i in bf]
#     
#     fig, ax1 = plt.subplots(figsize=(4,6))
#     im = ax1.scatter(np.zeros(len(lag_all)), lag_all, zorder=10, c=bf_scale, cmap='plasma', s=100)
#     im = ax1.scatter(np.ones(len(lag_first)), lag_first, zorder=10, c=bf_scale, cmap='plasma', s=100)
#     cbar = plt.colorbar(im)
#     cbar.ax.set_ylabel('best frequency (kHz)', fontsize=16)
#     cbar.ax.tick_params(axis='y', which='major', labelsize=14)
#     for i in range(len(lag_all)):
#         ax1.plot([0,1], [lag_all[i], lag_first[i]], c='k', zorder=0)
#     plt.locator_params(axis='x', nbins=2)    
#     ax1.set_xlim(-0.5,1.5)
#     ax1.set_ylabel('lags (ms)', fontsize=16)
#     ax1.set_xticks([0,1])
#     ax1.set_xticklabels(['All Cross', 'First Cross'])
#     ax1.tick_params(axis='both', which='major', labelsize=14)
# =============================================================================
    
# =============================================================================
#     """new index for only analysing data with valid best frequency"""
#     idx_lsfm = df.index[(df['type']=='Log sFM') & (df['project']=='Ic_map') & (df['hard_exclude']!='exclude') 
#                         &(df['tuning_check']!='exclude')]
# =============================================================================
    idx_puretone = df.index[(df['type']=='Log sFM') & (df['final_inclusion']=='yes')]
    
    savefig=False
    psth_para_inBF, psth_para_exBF = [],[]
    psth_inBF, psth_exBF = [],[]
    mouseIDs, filenames, patch_sites, bfs, bandwidths, bands_left, bands_right = [],[],[],[],[],[],[]
    coords_x, coords_y, coords_ortho, coords_orthoA2UF, angle = [],[],[],[],[] 
    
    neurons = []
    data_cf, data_bw, data_mr = [],[],[]
# =============================================================================
#     df_loc = 184
#     if df_loc == 184:
# =============================================================================
    for idx,df_loc in enumerate(idx_lsfm):
        filename = df['filename'][df_loc]
        df_info = pd.read_excel('lsfm_cell_note.xlsx')
        
        print(f'{filename}, {df_loc}')
        
        info_idx = df_info[df_info['index']==df_loc].index.values[0]
        version = df_info['version'][info_idx]
        mouse = df_info['mouseID'][info_idx]
        site = df_info['patch_site'][info_idx]
        tuning_tone = df_info['tuning_tone'][info_idx]
        
        bf = df_info['best_frequency'][info_idx]
        bandwidth = df_info['bandwidth'][info_idx]
        band_left = df_info['band_left'][info_idx]
        band_right = df_info['band_right'][info_idx]
        
        cell_data = np.load(f'{filename}_lsfm.npy', allow_pickle=True)
        para = cell_data.item().get('para')
        stim = cell_data.item().get('stim')
        resp = cell_data.item().get('resp')
        #slope_lags = cell_data.item().get('slope_lags')
        
        cf,band,modrate,_=zip(*para)
        band = sorted(set(band))
        cf = sorted(set(cf))
        modrate = sorted(set(modrate))
        resp = TFTool.prefilter(resp, 25000)
        
        titlename = f'{mouse}-{filename}'
        if titlename=='TG145-20230630_008':
            titlename='TG145-20230628_003'
        if titlename=='TG145-20230630_004':
            titlename='TG145-20230630_008'
        
        ##psth_para_analysis
        lsfm1 = Psth(stim, resp, para, titlename, version, bf, band_left, band_right, use_band=True)
        _ = lsfm1.plot_psth(saveplot=False)
        lsfm1.plot_psth_wwobf(saveplot=False)
        stim_in, stim_ex, resp_in, resp_ex, para_in, para_ex, _, _ = lsfm.resp_bf_or_not(stim, resp, para, bf, [band_left, band_right])
        
# =============================================================================
#         cursors_in = lsfm1.get_psth_cat()
#         cursors_ex = lsfm1.get_psth_cat(inRF=False)
#         
#         neuron = [mouse, filename, cursors_in, cursors_ex]
#         neurons.append(neuron)
#         
#     
#     # Rearrange PSTH cursor data to store in excel file
#     # Prepare "on" data
#     in_rows = []
#     for neuron_id, filename, in_cursors, _ in neurons:
#         row = [neuron_id, filename]
#         for name, x, y in in_cursors:
#             row.extend([x, y])
#         in_rows.append(row)
#     
#     # Prepare "off" data
#     ex_rows = []
#     for neuron_id, filename, _, ex_cursors in neurons:
#         row = [neuron_id, filename]
#         for name, x, y in ex_cursors:
#             row.extend([x, y])
#         ex_rows.append(row)
#     
#     # Extract header from one sample
#     cursor_names = [name for name, _, _ in neurons[0][2]]
#     columns = ['mouseID', 'filename']
#     for name in cursor_names:
#         columns.extend([f'{name}_x', f'{name}_y'])
#     
#     # Create DataFrames
#     df_in = pd.DataFrame(in_rows, columns=columns)
#     df_ex = pd.DataFrame(ex_rows, columns=columns)
#     
#     # Write both to Excel
#     with pd.ExcelWriter('lsfm_PSTH_cursors_new.xlsx') as writer:
#         df_in.to_excel(writer, sheet_name='in_band', index=False)
#         df_ex.to_excel(writer, sheet_name='ex_band', index=False)
# =============================================================================
    
        """psth seperated by parameter"""
        """0: cf, 1: bw, 2: mr"""
        psth_para_sep=[] #structure = (seperate para type, # of repeats, windows)
        para_sep=[] #structure = (seperate para type, tuple (parameter, # of repeats))
        for i in range(3):
            which_parameter=i
            psth_para_bf, para_bf = lsfm_psth.psth_para_sepearte(stim_in, resp_in, para_in, 
                                             which_parameter, bf, filename, 'inBF', plot=True, saveplot=savefig)
            _,_ = lsfm_psth.psth_para_sepearte(stim_ex, resp_ex, para_ex, 
                                             which_parameter, bf, filename, 'exBF', plot=True, saveplot=savefig)
            psth_para_sep.append(psth_para_bf)
            para_sep.append(para_bf)
        
            
        resp_flat = np.reshape(resp, (-1))
        resp_flat = TFTool.butter(resp_flat, 6, 50, 'low', 25000)
        import random
        randoms = random.sample(range(50,len(resp_flat)),1000)
        
        category_cf = lsfm_psth.get_section(filename, mouse, site, psth_para_sep, para_sep, 0)
        category_bw = lsfm_psth.get_section(filename, mouse, site, psth_para_sep, para_sep, 1)
        category_mr = lsfm_psth.get_section(filename, mouse, site, psth_para_sep, para_sep, 2)
        
        from_bf = np.array(category_cf['parameter']) - bf/1000
        category_cf['parameter'] = list(from_bf)
        
        
        data_cf.append(category_cf)
        data_bw.append(category_bw)
        data_mr.append(category_mr)
        
        
        
# =============================================================================
#         #organize coordinates, which is not very necessary.
#         coords_x.append(coords[(coords['mouseid'] == mouse) & (coords['regions'] == f'Patch_{site}')].x.item())
#         coords_y.append(coords[(coords['mouseid'] == mouse) & (coords['regions'] == f'Patch_{site}')].y.item())
#         coords_ortho.append(coords[(coords['mouseid'] == mouse) & (coords['regions'] == f'Patch_{site}')].orthogonal.item())
#         coords_orthoA2UF.append(coords[(coords['mouseid'] == mouse) & (coords['regions'] == f'Patch_{site}')].A2_UF.item())
#         angle.append(coords[(coords['mouseid'] == mouse) & (coords['regions'] == f'Patch_{site}')].angle.item())
#         filenames.append(filename)
#         mouseIDs.append(mouse)
#         patch_sites.append(site)
# =============================================================================

        
        
# =============================================================================
#         """
#         Analysis of subfield - psth section - lsfm parameters
# 
#         dict = {'parameter':data[0], 'repeat':data[1],
#                 'on_peak':data[2], 'on_loc':data[3], 'on_rise':data[4], 'on_rise10_loc':data[5], 
#                 'on_rise90_loc':data[6], 'on_decay':data[7], 'on_decay_loc':data[8], 'on_charge':data[9],
#                 'off_peak':data[10], 'off_loc':data[11], 'off_rise':data[12], 'off_rise10_loc':data[13], 
#                 'off_rise90_loc':data[14], 'off_decay':data[15], 'off_decay_loc':data[16], 'off_charge':data[17],
#                 'sustain':data[18]}
#         """
#         
#         para_type = ['cf', 'bw', 'mf']
#         para_type_full = ['center freq', 'bandwidth', 'mod rate']
#     
#     coordinate = pd.DataFrame({'filename':filenames, 'mouseID':mouseIDs, 'site':patch_sites,
#                                'coord_x':coords_x, 'coord_y':coords_y, 'coord_ortho':coords_ortho})
#     #coordinate.to_csv('coordination_final.csv', index=False)
#     
#     
#     df_cf = pd.DataFrame(data_cf)
#     df_bw = pd.DataFrame(data_bw)
#     df_mr = pd.DataFrame(data_mr)
#     cols_to_explode = [col for col in df_cf.columns if df_cf[col].apply(lambda x: isinstance(x, list)).all()]
#     df_cf = df_cf.explode(cols_to_explode, ignore_index=True)
#     df_bw = df_bw.explode(cols_to_explode, ignore_index=True)
#     df_mr = df_mr.explode(cols_to_explode, ignore_index=True)
#     
#     with pd.ExcelWriter('categories.xlsx') as writer:
#         df_cf.to_excel(writer, sheet_name='center_frequency')
#         df_bw.to_excel(writer, sheet_name='bandwidth')
#         df_mr.to_excel(writer, sheet_name='modulation_rate')
#     
#     categories = ['on peak', 'on charge', 'off peak', 'off charge', 'sustain potential', 'sustain charge']
#     for category in categories:
#         lsfm_psth.plot_group_category(df_bw, coordinate, 1, category)
# =============================================================================
    

    
        
# =============================================================================
#         
#         #plot to check the acquired values from each categories
#         for p_type in range(3):
#             dict_key = ['parameter', 'repeat','on_peak', 'on_loc', 'on_rise', 'on_rise10', 
#                     'on_rise90', 'on_decay', 'on_decay_loc', 'on_charge',
#                     'off_peak', 'off_loc', 'off_rise', 'off_rise10', 
#                     'off_rise90', 'off_decay', 'off_decay_loc', 'off_charge', 'sustain']
#             para_type = ['cf', 'bw', 'mf']
#             para_type_full = ['center freq', 'bandwidth', 'mod rate']
#             psth_sec = lsfm_psth.get_section(psth_para_sep, para_sep, p_type)
#             
#             labels = psth_sec[dict_key[0]]
#             bounds = [20, 30, 40, 50, 60, 70, 80, 90]
#             cmap = mpl.cm.inferno
#             norm = mpl.colors.BoundaryNorm(bounds, cmap.N, extend='both')
#             colors = [cmap(norm(b)) for b in bounds]
#             subcolors = ['indigo', 'blueviolet', 'violet', 'hotpink', 'orangered', 'orange', 'gold']
#             
#             fig, ax = plt.subplots()
#             for idx, psth_working in enumerate(psth_para_sep[p_type]):
#                 on_rise10_loc = psth_sec['on_rise10_loc'][idx]
#                 on_decay_loc = psth_sec['on_decay_loc'][idx]
#                 off_rise10_loc = psth_sec['off_rise10_loc'][idx]
#                 off_decay_loc = psth_sec['off_decay_loc'][idx]
#                 on_area = np.arange(on_rise10_loc, on_decay_loc, 250)
#                 off_area = np.arange(off_rise10_loc, off_decay_loc, 250)
#                 
#                 ax.plot(psth_working, color=colors[idx], label=labels[idx], zorder=10)
#                 ax.legend()
#                 
#                 on_x = int(psth_sec[dict_key[3]][idx])
#                 ax.scatter(on_x, psth_working[on_x], color=colors[idx], alpha=0.8, marker=7, zorder=15)
#                 off_x = int(psth_sec[dict_key[11]][idx])
#                 ax.scatter(off_x, psth_working[off_x], color=colors[idx], alpha=0.8, marker=7, zorder=15)
#                 
#                 for i in on_area:
#                     i = int(i)
#                     ax.plot([i,i], [np.mean(psth_working[250:1250]),psth_working[i]], color=colors[idx], alpha=0.6, zorder=0)
#                 for i in off_area:
#                     i = int(i)
#                     ax.plot([i,i], [np.mean(psth_working[25250:26250]),psth_working[i]], color=colors[idx], alpha=0.6, zorder=0)
#                 
#             sustain = psth_sec['sustain']
#             [ax.hlines(y=_s, xmin=15000, xmax=25000, color=colors[idx], linestyle='--', zorder=15) for idx, _s in enumerate(sustain)]
#             [ax.axvline(x=_x, color='k', linestyle='--', alpha=0.5) for _x in [1250,26250]]
#             ax.set_title(f'{filename}  {para_type_full[p_type]}  inBF', fontsize=16)
#             
#             plt.savefig(f'{filename}_{para_type[p_type]}_inBF.png', dpi=500, bbox_inches='tight')
#             #plt.show()
#             plt.close()
# =============================================================================
        
        
        
        
# =============================================================================
#     """PSTH category value, choose between using sweeping RF band or BF"""
#     bf_or_band = 'bf'
#     
#     if bf_or_band == 'band':
#         ##Get PSTH category value using RF band
#         psth_para_all = pd.read_excel('psth_category_window_lsfm.xlsx', sheet_name='band')
#         df_info = pd.read_excel('lsfm_cell_note.xlsx')
#         for df_loc in list(set(psth_para_all['df_loc'])):      
#             filename = df['filename'][df_loc]
#             cell_data = np.load(f'{filename}_lsfm.npy', allow_pickle=True)
#             para = cell_data.item().get('para')
#             stim = cell_data.item().get('stim')
#             resp = cell_data.item().get('resp')
#             
#             
#             info_idx = df_info[df_info['index']==df_loc].index.values[0]
#             version = df_info['version'][info_idx]
#             mouse = df_info['mouseID'][info_idx]
#             site = df_info['patch_site'][info_idx]
#             tuning_tone = df_info['tuning_tone'][info_idx]
#             
#             bf = df_info['best_frequency'][info_idx]
#             bandwidth = df_info['bandwidth'][info_idx]
#             band_left = df_info['band_left'][info_idx]
#             band_right = df_info['band_right'][info_idx]
#             
#             cell_data = np.load(f'{filename}_lsfm.npy', allow_pickle=True)
#             para = cell_data.item().get('para')
#             stim = cell_data.item().get('stim')
#             resp = cell_data.item().get('resp')
#             #slope_lags = cell_data.item().get('slope_lags')
#             
#             #
#             stim_in, stim_ex, resp_in, resp_ex, para_in, para_ex, idx_in, idx_ex = lsfm.resp_bf_or_not(stim, resp, para, bf, [band_left, band_right])
#             
#             ##psth_para_analysis
#             
#             ## sweep bf (or RF band)
#             psth_in = Psth(stim_in, resp_in, para_in, filename, version, bf, band_left, band_right)
#             
#             psth_inbf = psth_para_all[(psth_para_all['df_loc']==df_loc) & (psth_para_all['bf']=='in')]
#             psth_y = psth_in.psth
#             onset_y = psth_y[1250]
#             offset_y = psth_y[26250]
#             peak_amp = (psth_y[psth_inbf['peak']] - psth_y[psth_inbf['peak_start']]).item()
#             time2peak = (psth_inbf['peak'].item() - 1250)/25
#             if np.isnan(psth_inbf['after_peak_transition'].item()):
#                 sustain_x1 = int(psth_inbf['after_peak_start'].item())
#             else:
#                 sustain_x1 = int(psth_inbf['after_peak_transition'].item())
#             sustain_x2 = int(psth_inbf['after_peak_end'].item())
#             
#             avg_sustain = np.mean(psth_y[sustain_x1:sustain_x2])
#             offpeak_amp = (psth_y[psth_inbf['offset_peak']] - psth_y[psth_inbf['peak_start']]).item()
#             time2offpeak = (psth_inbf['offset_peak'].item() - 26250)/25
#             FWHM = (psth_inbf['half_amp_end'] - psth_inbf['half_amp_start']).item()/25
#         
#             psth_para_inBF.append([onset_y, offset_y, peak_amp, time2peak, FWHM, avg_sustain, offpeak_amp, time2offpeak])
#             #psth_inBF.append(psth_bf[0])
#             
#             ## never sweep bf (or RF band)
#             psth_ex = Psth(stim_ex, resp_ex, para_ex, filename, version, bf, band_left, band_right)
#             
#             psth_exbf = psth_para_all[(psth_para_all['df_loc']==df_loc) & (psth_para_all['bf']=='out')]
#             psth_y = psth_ex.psth
#             onset_y = psth_y[1250]
#             offset_y = psth_y[26250]
#             peak_amp = (psth_y[psth_exbf['peak']] - psth_y[psth_exbf['peak_start']]).item()
#             time2peak = (psth_exbf['peak'].item() - 1250)/25
#             if np.isnan(psth_exbf['after_peak_transition'].item()):
#                 sustain_x1 = int(psth_exbf['after_peak_start'].item())
#             else:
#                 sustain_x1 = int(psth_exbf['after_peak_transition'].item())
#             sustain_x2 = int(psth_exbf['after_peak_end'].item())
#             
#             avg_sustain = np.mean(psth_y[sustain_x1:sustain_x2])
#             offpeak_amp = (psth_y[psth_exbf['offset_peak']] - psth_y[psth_exbf['peak_start']]).item()
#             time2offpeak = (psth_exbf['offset_peak'].item() - 26250)/25
#             FWHM = (psth_exbf['half_amp_end'] - psth_exbf['half_amp_start']).item()/25
#         
#             psth_para_exBF.append([onset_y, offset_y, peak_amp, time2peak, FWHM, avg_sustain, offpeak_amp, time2offpeak])
#             #psth_exBF.append(psth_bf[1])
#             
#             filenames.append(filename)
#             mouseIDs.append(mouse)
#             patch_sites.append(site)
#             bfs.append(bf)
#             bandwidths.append(bandwidth)
#             bands_left.append(band_left)
#             bands_right.append(band_right)
#             
#         psth_para_inBF = np.array(psth_para_inBF).swapaxes(0,1)
#         data_inBF = {'mouseid':mouseIDs, 'filename':filenames, 'patch_site':patch_sites, 
#                      'best_frequency':bfs, 'bandwidth':bandwidths, 'band_left':bands_left, 'band_right':bands_right,
#                      'onset': psth_para_inBF[0], 'offset': psth_para_inBF[1], 'peak_amplitude': psth_para_inBF[2],
#                      'time_to_peak':  psth_para_inBF[3], 'FWHM': psth_para_inBF[4], 'sustain': psth_para_inBF[5],
#                      'offpeak_amplitude': psth_para_inBF[6], 'time_to_offpeak': psth_para_inBF[7]}
#         
#         psth_para_exBF = np.array(psth_para_exBF).swapaxes(0,1)
#         data_exBF = {'mouseid':mouseIDs, 'filename':filenames, 'patch_site':patch_sites, 
#                      'best_frequency':bfs, 'bandwidth':bandwidths, 'band_left':bands_left, 'band_right':bands_right,
#                      'onset': psth_para_exBF[0], 'offset': psth_para_exBF[1], 'peak_amplitude': psth_para_exBF[2],
#                      'time_to_peak':  psth_para_exBF[3], 'FWHM': psth_para_exBF[4], 'sustain': psth_para_exBF[5],
#                      'offpeak_amplitude': psth_para_exBF[6], 'time_to_offpeak': psth_para_exBF[7]}
#         
#         df_psth_inbf = pd.DataFrame(data_inBF)
#         df_psth_inbf.to_csv('lsfm_psth_para_inBF_new.csv', index=False)
#         df_psth_exbf = pd.DataFrame(data_exBF)
#         df_psth_exbf.to_csv('lsfm_psth_para_exBF_new.csv', index=False)
#     
#     if bf_or_band == 'bf':
#         ##Get PSTH category value using BF
#         psth_para_all = pd.read_excel('psth_category_window_lsfm.xlsx', sheet_name='bf')
#         df_info = pd.read_excel('lsfm_cell_note.xlsx')
#         for df_loc in list(set(psth_para_all['df_loc'])):      
#             filename = df['filename'][df_loc]
#             cell_data = np.load(f'{filename}_lsfm.npy', allow_pickle=True)
#             para = cell_data.item().get('para')
#             stim = cell_data.item().get('stim')
#             resp = cell_data.item().get('resp')
#             
#             
#             info_idx = df_info[df_info['index']==df_loc].index.values[0]
#             version = df_info['version'][info_idx]
#             mouse = df_info['mouseID'][info_idx]
#             site = df_info['patch_site'][info_idx]
#             tuning_tone = df_info['tuning_tone'][info_idx]
#             
#             bf = df_info['best_frequency'][info_idx]
#             bandwidth = df_info['bandwidth'][info_idx]
#             band_left = df_info['band_left'][info_idx]
#             band_right = df_info['band_right'][info_idx]
#             
#             cell_data = np.load(f'{filename}_lsfm.npy', allow_pickle=True)
#             para = cell_data.item().get('para')
#             stim = cell_data.item().get('stim')
#             resp = cell_data.item().get('resp')
#             #slope_lags = cell_data.item().get('slope_lags')
#             
#             #
#             stim_in, stim_ex, resp_in, resp_ex, para_in, para_ex, idx_in, idx_ex = lsfm.resp_bf_or_not(stim, resp, para, bf)
#             
#             ##psth_para_analysis
#             
#             ## sweep bf (or RF band)
#             psth_in = Psth(stim_in, resp_in, para_in, filename, version, bf, band_left, band_right)
#             
#             psth_inbf = psth_para_all[(psth_para_all['df_loc']==df_loc) & (psth_para_all['bf']=='in')]
#             psth_y = psth_in.psth
#             onset_y = psth_y[1250]
#             offset_y = psth_y[26250]
#             peak_amp = (psth_y[psth_inbf['peak']] - psth_y[psth_inbf['peak_start']]).item()
#             time2peak = (psth_inbf['peak'].item() - 1250)/25
#             if np.isnan(psth_inbf['after_peak_transition'].item()):
#                 sustain_x1 = int(psth_inbf['after_peak_start'].item())
#             else:
#                 sustain_x1 = int(psth_inbf['after_peak_transition'].item())
#             sustain_x2 = int(psth_inbf['after_peak_end'].item())
#             
#             avg_sustain = np.mean(psth_y[sustain_x1:sustain_x2])
#             offpeak_amp = (psth_y[psth_inbf['offset_peak']] - psth_y[psth_inbf['peak_start']]).item()
#             time2offpeak = (psth_inbf['offset_peak'].item() - 26250)/25
#             FWHM = (psth_inbf['half_amp_end'] - psth_inbf['half_amp_start']).item()/25
#         
#             psth_para_inBF.append([onset_y, offset_y, peak_amp, time2peak, FWHM, avg_sustain, offpeak_amp, time2offpeak])
#             #psth_inBF.append(psth_bf[0])
#             
#             ## never sweep bf (or RF band)
#             psth_ex = Psth(stim_ex, resp_ex, para_ex, filename, version, bf, band_left, band_right)
#             
#             psth_exbf = psth_para_all[(psth_para_all['df_loc']==df_loc) & (psth_para_all['bf']=='out')]
#             psth_y = psth_ex.psth
#             onset_y = psth_y[1250]
#             offset_y = psth_y[26250]
#             peak_amp = (psth_y[psth_exbf['peak']] - psth_y[psth_exbf['peak_start']]).item()
#             time2peak = (psth_exbf['peak'].item() - 1250)/25
#             if np.isnan(psth_exbf['after_peak_transition'].item()):
#                 sustain_x1 = int(psth_exbf['after_peak_start'].item())
#             else:
#                 sustain_x1 = int(psth_exbf['after_peak_transition'].item())
#             sustain_x2 = int(psth_exbf['after_peak_end'].item())
#             
#             avg_sustain = np.mean(psth_y[sustain_x1:sustain_x2])
#             offpeak_amp = (psth_y[psth_exbf['offset_peak']] - psth_y[psth_exbf['peak_start']]).item()
#             time2offpeak = (psth_exbf['offset_peak'].item() - 26250)/25
#             FWHM = (psth_exbf['half_amp_end'] - psth_exbf['half_amp_start']).item()/25
#         
#             psth_para_exBF.append([onset_y, offset_y, peak_amp, time2peak, FWHM, avg_sustain, offpeak_amp, time2offpeak])
#             #psth_exBF.append(psth_bf[1])
#             
#             filenames.append(filename)
#             mouseIDs.append(mouse)
#             patch_sites.append(site)
#             bfs.append(bf)
#             bandwidths.append(bandwidth)
#             bands_left.append(band_left)
#             bands_right.append(band_right)
#             
#         psth_para_inBF = np.array(psth_para_inBF).swapaxes(0,1)
#         data_inBF = {'mouseid':mouseIDs, 'filename':filenames, 'patch_site':patch_sites, 
#                      'best_frequency':bfs, 'bandwidth':bandwidths, 'band_left':bands_left, 'band_right':bands_right,
#                      'onset': psth_para_inBF[0], 'offset': psth_para_inBF[1], 'peak_amplitude': psth_para_inBF[2],
#                      'time_to_peak':  psth_para_inBF[3], 'FWHM': psth_para_inBF[4], 'sustain': psth_para_inBF[5],
#                      'offpeak_amplitude': psth_para_inBF[6], 'time_to_offpeak': psth_para_inBF[7]}
#         
#         psth_para_exBF = np.array(psth_para_exBF).swapaxes(0,1)
#         data_exBF = {'mouseid':mouseIDs, 'filename':filenames, 'patch_site':patch_sites, 
#                      'best_frequency':bfs, 'bandwidth':bandwidths, 'band_left':bands_left, 'band_right':bands_right,
#                      'onset': psth_para_exBF[0], 'offset': psth_para_exBF[1], 'peak_amplitude': psth_para_exBF[2],
#                      'time_to_peak':  psth_para_exBF[3], 'FWHM': psth_para_exBF[4], 'sustain': psth_para_exBF[5],
#                      'offpeak_amplitude': psth_para_exBF[6], 'time_to_offpeak': psth_para_exBF[7]}
#         
#         df_psth_inbf = pd.DataFrame(data_inBF)
#         df_psth_inbf.to_csv('lsfm_psth_para_atBF_new.csv', index=False)
#         df_psth_exbf = pd.DataFrame(data_exBF)
#         df_psth_exbf.to_csv('lsfm_psth_para_neverBF_new.csv', index=False)
# =============================================================================

# =============================================================================
#         ##plot psth in browser to get xy
#         pk_x = np.argmax(psth_bf[0][1][:12500])
#         pk_y = np.max(psth_bf[0][1][:12500])
#         off_x = np.argmax(psth_bf[0][1][25000:])+25000
#         off_y = psth_bf[0][1][off_x]
#         half = pk_y/2
#         decay = pk_y/math.e
#         fig = px.scatter(x=psth_bf[0][0], y=psth_bf[0][1], title=f'{df_loc}_{filename}_in_bf')
#         fig.add_trace(go.Scatter(x=[pk_x], y=[pk_y], mode = 'markers', 
#                                  name="Peak", hoverinfo="skip", marker_size = 15))
#         fig.add_trace(go.Scatter(x=[off_x], y=[off_y], mode = 'markers', 
#                                  name="Off_Peak", hoverinfo="skip", marker_size = 15))
#         fig.add_annotation(x=pk_x, y=pk_y, text=f'{pk_x}, {pk_y}', showarrow=False, yshift=25)
#         fig.add_annotation(x=off_x, y=off_y, text=f'{off_x}, {off_y}', showarrow=False, yshift=25)
#         fig.add_hline(y=half, line_width=2, line_dash='dash')
#         fig.add_hline(y=decay, line_width=2, line_dash='dash', line_color='red')
#         fig.show()
#         
#         pk_x = np.argmax(psth_bf[1][1][:12500])
#         pk_y = np.max(psth_bf[1][1][:12500])
#         off_x = np.argmax(psth_bf[1][1][25000:])+25000
#         off_y = psth_bf[1][1][off_x]
#         half = pk_y/2
#         decay = pk_y/math.e
#         fig = px.scatter(x=psth_bf[1][0], y=psth_bf[1][1], title=f'{df_loc}_{filename}_ex_bf')
#         fig.add_trace(go.Scatter(x=[pk_x], y=[pk_y], mode = 'markers',
#                                  name="Peak", hoverinfo="skip", marker_size = 15))
#         fig.add_trace(go.Scatter(x=[off_x], y=[off_y], mode = 'markers', 
#                                  name="Off_Peak", hoverinfo="skip", marker_size = 15))
#         fig.add_annotation(x=pk_x, y=pk_y, text=f'{pk_x}, {pk_y}', showarrow=False, yshift=15)
#         fig.add_annotation(x=off_x, y=off_y, text=f'{off_x}, {off_y}', showarrow=False, yshift=25)
#         fig.add_hline(y=half, line_width=2, line_dash='dash')
#         fig.add_hline(y=decay, line_width=2, line_dash='dash', line_color='red')
#         fig.show()
# =============================================================================
        
# =============================================================================
#         ##save to matlab        
#         to_matlab = {'stim':stim, 'resp':resp, 'fc':cf, 'bandwidth':band, 'mod_rate': modrate}
#         scipy.io.savemat(f'{filename}_data.mat', to_matlab)
#         
#         ##import from cwt file from matlab
#         import mat73
#         cwt = mat73.loadmat(r'C:\Users\McGinley3\Documents\GitHub\lsfm\20220527_006_cwt.mat')
#         f = cwt['f']
#         f = f[:,0]
#         wt = cwt['wt'].T[:,0]
#         wt_a = []
#         for w in wt:
#             wt_a.append(w)
#         wt_a = np.array(wt_a)
# 
#         ##use wavelet stimu to generate STRF
#         f = cwt['f']
#         wt = np.array(cwt['wt'])
#         wt = signal.resample(wt, 500, axis=2)
#         wt = np.ndarray.tolist(wt)
#         cwt = {'f':f, 'wt':wt}
#         
#         
#         s = lsfm_strf.STRF(cwt, resp, filename=filename)
#         s.strf()
# =============================================================================

        
# =============================================================================
#         ##load from TDMS
#         fdir = df['path'][df_loc]
#         filename = df['filename'][df_loc]
#         version = df['Py_Version'][df_loc]
#         if version == 1:
#             t = Tdms_V1()
#             t.loadtdms(fdir, protocol=0, load_sound=True, precise_timing=True)
#         if version == 2:
#             t = Tdms_V2()
#             t.loadtdms(fdir, protocol=0, load_sound=True)
#         
#         
#         sound = t.stim_raw
# =============================================================================


    
    
    
