from TDMS_ver5 import Tdms_V1, Tdms_V2
import numpy as np
import os
import matplotlib.pyplot as plt
import matplotlib as mpl
from pathlib import Path
from scipy import signal
from scipy import stats
from scipy import interpolate
import scipy.io
import TFTool
import pandas as pd
import lsfm
import lsfm_psth
from lsfm_psth import Psth
import lsfm_slope
import math
import lsfm_strf
import plotly.io as pio
import plotly.express as px
import plotly.graph_objects as go
pio.renderers.default='browser'
    
if  __name__ == "__main__":
    df = pd.read_csv('patch_list_E.csv', dtype={'date':str, '#':str})
    idx_lsfm = df.index[(df['type']=='Log sFM') & (df['project']=='Ic_map') & (df['hard_exclude']!='exclude')]
    #exclude = [20,21,32,33,40,42,54,56,58,59,53,65,67,70]
    #cell_note = pd.read_csv('cell_note_all.csv')
    #lsfm.resp_overcell(df, tlsfm, saveplot=False)
    #resp_cell = [[],[],[],[],[],[]]
    #band_cell_mean=[]
    #lsfm.best_lags()
    
    
# =============================================================================
#     bf = cell_note['best frequency']
#     lag_all = cell_note['best_lag_all']
#     lag_first = cell_note['best_lag_bf']
#     bf_scale = [i/1000 for i in bf]
#     
#     fig, ax1 = plt.subplots(figsize=(4,6))
#     im = ax1.scatter(np.zeros(len(lag_all)), lag_all, zorder=10, c=bf_scale, cmap='plasma', s=100)
#     im = ax1.scatter(np.ones(len(lag_first)), lag_first, zorder=10, c=bf_scale, cmap='plasma', s=100)
#     cbar = plt.colorbar(im)
#     cbar.ax.set_ylabel('best frequency (kHz)', fontsize=16)
#     cbar.ax.tick_params(axis='y', which='major', labelsize=14)
#     for i in range(len(lag_all)):
#         ax1.plot([0,1], [lag_all[i], lag_first[i]], c='k', zorder=0)
#     plt.locator_params(axis='x', nbins=2)    
#     ax1.set_xlim(-0.5,1.5)
#     ax1.set_ylabel('lags (ms)', fontsize=16)
#     ax1.set_xticks([0,1])
#     ax1.set_xticklabels(['All Cross', 'First Cross'])
#     ax1.tick_params(axis='both', which='major', labelsize=14)
# =============================================================================
    
    """new index for only analysing data with valid best frequency"""
    idx_lsfm = df.index[(df['type']=='Log sFM') & (df['project']=='Ic_map') & (df['hard_exclude']!='exclude') 
                        &(df['tuning']!='no')]
    
    savefig=False
    
    psth_para_inBF, psth_para_exBF = [],[]
    psth_inBF, psth_exBF = [],[]
    mouseIDs, filenames, patch_sites, bfs, bandwidths = [],[],[],[],[]

    data_cf, data_bw, data_mr = [],[],[]
    idx_lsfm = [i for i in idx_lsfm if i >= 205]
    #df_loc = 205
    #if df_loc == 205:
    for idx,df_loc in enumerate(idx_lsfm):
        filename = df['filename'][df_loc]
        
        print(f'{filename}, {df_loc}')
        
        version = df['Py_version'][df_loc]
        bf = df['best_frequency'][df_loc]
        mouse = df['mouse_id'][df_loc]
        site = df['patch_site'][df_loc]
        tuning_tone = df['tuning_from'][df_loc]
        df_tuning = pd.read_csv('tone_psth_para_inBF.csv')
        bandwidth = df_tuning[df_tuning['filename']==tuning_tone].bandwidth.item()
        
        cell_data = np.load(f'{filename}_lsfm.npy', allow_pickle=True)
        para = cell_data.item().get('para')
        stim = cell_data.item().get('stim')
        resp = cell_data.item().get('resp')
        #slope_lags = cell_data.item().get('slope_lags')
        
        cf,band,modrate,_=zip(*para)
        band = sorted(set(band))
        cf = sorted(set(cf))
        modrate = sorted(set(modrate))
        resp = TFTool.prefilter(resp, 25000)
        
        
        
        ##psth_para_analysis
        psth = Psth(resp, para, filename, version)
        x,y,err=psth.psth_all(plot=False)
        psth_bf = lsfm_psth.psth_wwo_bf(resp, para, bf, version, filename, bandwidth, plot=False, saveplot=savefig)
        
        resp_in, resp_ex, para_in, para_ex, idx_in, idx_ex = lsfm.resp_bfband_or_not(resp, para, bf, bandwidth)
        stim_in = [stim[i] for i in idx_in]
        stim_ex = [stim[i] for i in idx_ex]
        resp_in = np.array(resp_in)
        resp_ex = np.array(resp_ex)
        
        """psth seperated by parameter"""
        """0: cf, 1: bw, 2: mr"""
        psth_para_sep=[] #structure = (seperate para type, # of repeats, windows)
        para_sep=[] #structure = (seperate para type, tuple (parameter, # of repeats))
        for i in range(3):
            which_parameter=i
            psth_para_bf, para_bf = lsfm_psth.psth_para_sepearte(stim_in, resp_in, para_in, 
                                             which_parameter, bf, filename, 'inBF', plot=True, saveplot=savefig)
            _,_ = lsfm_psth.psth_para_sepearte(stim_ex, resp_ex, para_ex, 
                                             which_parameter, bf, filename, 'exBF', plot=False, saveplot=savefig)
            psth_para_sep.append(psth_para_bf)
            para_sep.append(para_bf)
        
            
        
        
        """
        Analysis of subfield - psth section - lsfm parameters

        dict = {'parameter':data[0], 'repeat':data[1],
                'on_peak':data[2], 'on_loc':data[3], 'on_rise':data[4], 'on_rise10_loc':data[5], 
                'on_rise90_loc':data[6], 'on_decay':data[7], 'on_decay_loc':data[8], 'on_charge':data[9],
                'off_peak':data[10], 'off_loc':data[11], 'off_rise':data[12], 'off_rise10_loc':data[13], 
                'off_rise90_loc':data[14], 'off_decay':data[15], 'off_decay_loc':data[16], 'off_charge':data[17],
                'sustain':data[18]}
        """
        
        para_type = ['cf', 'bw', 'mf']
        para_type_full = ['center freq', 'bandwidth', 'mod rate']
        
        para_section_cf = lsfm_psth.get_section(psth_para_sep, para_sep, 0)
        para_section_bw = lsfm_psth.get_section(psth_para_sep, para_sep, 1)
        para_section_mr = lsfm_psth.get_section(psth_para_sep, para_sep, 2)
        
        
        #lsfm_psth.plot_category(filename, bf, para_section_cf, para_type=0, saveplot=False)
        #lsfm_psth.plot_category(filename, bf, para_section_bw, para_type=1, saveplot=False)
        #lsfm_psth.plot_category(filename, bf, para_section_mr, para_type=2, saveplot=False)
        
        lsfm_psth.plot_single(filename, bf, psth_para_sep, para_section_cf, para_type=0, saveplot=True)
        lsfm_psth.plot_single(filename, bf, psth_para_sep, para_section_bw, para_type=1, saveplot=True)
        lsfm_psth.plot_single(filename, bf, psth_para_sep, para_section_mr, para_type=2, saveplot=True)
        
        
        
# =============================================================================
#         #center frequency
#         psth_cf = lsfm_psth.get_section(psth_para_sep, para_sep, 0)
#         cf_para = psth_cf['parameter']
#         cf_para = cf_para-bf/1000
#         cf_para_abs = np.abs(cf_para-bf/1000)
#         
#         on_peak = psth_cf['on_peak']
#         slope, intercept, r_value, p_value, std_err = stats.linregress(cf_para_abs, on_peak)
#         on_peak_cf = slope
#         on_loc = psth_cf['on_loc']
#         slope, intercept, r_value, p_value, std_err = stats.linregress(cf_para_abs, on_loc)
#         on_loc_cf = slope
#         on_charge = psth_cf['on_charge']
#         slope, intercept, r_value, p_value, std_err = stats.linregress(cf_para_abs, on_charge)
#         on_charge_cf = slope
#         
#         off_peak = psth_cf['off_peak']
#         slope, intercept, r_value, p_value, std_err = stats.linregress(cf_para_abs, off_peak)
#         off_peak_cf = slope
#         off_loc = psth_cf['off_loc']
#         slope, intercept, r_value, p_value, std_err = stats.linregress(cf_para_abs, off_loc)
#         off_loc_cf = slope
#         off_charge = psth_cf['off_charge']
#         slope, intercept, r_value, p_value, std_err = stats.linregress(cf_para_abs, off_charge)
#         off_charge_cf = slope
#         
#         sustain = psth_cf['sustain']
#         slope, intercept, r_value, p_value, std_err = stats.linregress(cf_para_abs, sustain)
#         sustain_cf = slope
#         
#         #bandwidth
#         psth_bw = lsfm_psth.get_section(psth_para_sep, para_sep, 1)
#         bw_para = psth_bw['parameter']
#         
#         on_peak = psth_bw['on_peak']
#         slope, intercept, r_value, p_value, std_err = stats.linregress(bw_para, on_peak)
#         on_peak_bw = slope
#         on_loc = psth_bw['on_loc']
#         slope, intercept, r_value, p_value, std_err = stats.linregress(bw_para, on_loc)
#         on_loc_bw = slope
#         on_charge = psth_bw['on_charge']
#         slope, intercept, r_value, p_value, std_err = stats.linregress(bw_para, on_charge)
#         on_charge_bw = slope
#         
#         off_peak = psth_bw['off_peak']
#         slope, intercept, r_value, p_value, std_err = stats.linregress(bw_para, off_peak)
#         off_peak_bw = slope
#         off_loc = psth_bw['off_loc']
#         slope, intercept, r_value, p_value, std_err = stats.linregress(bw_para, off_loc)
#         off_loc_bw = slope
#         off_charge = psth_bw['off_charge']
#         slope, intercept, r_value, p_value, std_err = stats.linregress(bw_para, off_charge)
#         off_charge_bw = slope
#         
#         sustain = psth_bw['sustain']
#         slope, intercept, r_value, p_value, std_err = stats.linregress(bw_para, sustain)
#         sustain_bw = slope
#         
#         #modulation rate
#         psth_mr = lsfm_psth.get_section(psth_para_sep, para_sep, 2)
#         mr_para = psth_mr['parameter']
#         
#         on_peak = psth_mr['on_peak']
#         slope, intercept, r_value, p_value, std_err = stats.linregress(mr_para, on_peak)
#         on_peak_mr = slope
#         on_loc = psth_mr['on_loc']
#         slope, intercept, r_value, p_value, std_err = stats.linregress(mr_para, on_loc)
#         on_loc_mr = slope
#         on_charge = psth_mr['on_charge']
#         slope, intercept, r_value, p_value, std_err = stats.linregress(mr_para, on_charge)
#         on_charge_mr = slope
#         
#         off_peak = psth_mr['off_peak']
#         slope, intercept, r_value, p_value, std_err = stats.linregress(mr_para, off_peak)
#         off_peak_mr = slope
#         off_loc = psth_mr['off_loc']
#         slope, intercept, r_value, p_value, std_err = stats.linregress(mr_para, off_loc)
#         off_loc_mr = slope
#         off_charge = psth_mr['off_charge']
#         slope, intercept, r_value, p_value, std_err = stats.linregress(mr_para, off_charge)
#         off_charge_mr = slope
#         
#         sustain = psth_mr['sustain']
#         slope, intercept, r_value, p_value, std_err = stats.linregress(mr_para, sustain)
#         sustain_mr = slope
#             
#         data_cf.append({'mouseid':mouse, 'filename':filename, 'patch_site':site, 'best_frequency':bf, 
#                              'on_peak':on_peak_cf, 'on_loc':on_loc_cf, 'on_charge':on_charge_cf, 
#                              'off_peak':off_peak_cf, 'off_loc':off_loc_cf, 'off_charge':off_charge_cf, 
#                              'sustain':sustain_cf})
#         
#         data_bw.append({'mouseid':mouse, 'filename':filename, 'patch_site':site, 'best_frequency':bf, 
#                              'on_peak':on_peak_bw, 'on_loc':on_loc_bw, 'on_charge':on_charge_bw, 
#                              'off_peak':off_peak_bw, 'off_loc':off_loc_bw, 'off_charge':off_charge_bw, 
#                              'sustain':sustain_bw})
#         
#         data_mr.append({'mouseid':mouse, 'filename':filename, 'patch_site':site, 'best_frequency':bf, 
#                              'on_peak':on_peak_mr, 'on_loc':on_loc_mr, 'on_charge':on_charge_mr, 
#                              'off_peak':off_peak_mr, 'off_loc':off_loc_mr, 'off_charge':off_charge_mr, 
#                              'sustain':sustain_mr})
#         
# # =============================================================================
# #         #save data as list
# #         #structure = (cell, para_type, category)        
# #         data.append([[on_peak_cf, on_loc_cf, on_charge_cf, off_peak_cf, off_loc_cf, off_charge_cf, sustain_cf], 
# #                 [on_peak_bw, on_loc_bw, on_charge_bw, off_peak_bw, off_loc_bw, off_charge_bw, sustain_bw],
# #                 [on_peak_mr, on_loc_mr, on_charge_mr, off_peak_mr, off_loc_mr, off_charge_mr, sustain_mr]])
# # =============================================================================
#     
#     data_cf = pd.DataFrame(data_cf)
#     data_bw = pd.DataFrame(data_bw)
#     data_mr = pd.DataFrame(data_mr)
#     
#     data_cf.to_csv('para_sep_cf.csv', index=False)
#     data_bw.to_csv('para_sep_bw.csv', index=False)
#     data_mr.to_csv('para_sep_mr.csv', index=False)
# =============================================================================
    
        
# =============================================================================
#         
#         #plot to check the acquired values from each categories
#         for p_type in range(3):
#             dict_key = ['parameter', 'repeat','on_peak', 'on_loc', 'on_rise', 'on_rise10', 
#                     'on_rise90', 'on_decay', 'on_decay_loc', 'on_charge',
#                     'off_peak', 'off_loc', 'off_rise', 'off_rise10', 
#                     'off_rise90', 'off_decay', 'off_decay_loc', 'off_charge', 'sustain']
#             para_type = ['cf', 'bw', 'mf']
#             para_type_full = ['center freq', 'bandwidth', 'mod rate']
#             psth_sec = lsfm_psth.get_section(psth_para_sep, para_sep, p_type)
#             
#             labels = psth_sec[dict_key[0]]
#             bounds = [20, 30, 40, 50, 60, 70, 80, 90]
#             cmap = mpl.cm.inferno
#             norm = mpl.colors.BoundaryNorm(bounds, cmap.N, extend='both')
#             colors = [cmap(norm(b)) for b in bounds]
#             subcolors = ['indigo', 'blueviolet', 'violet', 'hotpink', 'orangered', 'orange', 'gold']
#             
#             fig, ax = plt.subplots()
#             for idx, psth_working in enumerate(psth_para_sep[p_type]):
#                 on_rise10_loc = psth_sec['on_rise10_loc'][idx]
#                 on_decay_loc = psth_sec['on_decay_loc'][idx]
#                 off_rise10_loc = psth_sec['off_rise10_loc'][idx]
#                 off_decay_loc = psth_sec['off_decay_loc'][idx]
#                 on_area = np.arange(on_rise10_loc, on_decay_loc, 250)
#                 off_area = np.arange(off_rise10_loc, off_decay_loc, 250)
#                 
#                 ax.plot(psth_working, color=colors[idx], label=labels[idx], zorder=10)
#                 ax.legend()
#                 
#                 on_x = int(psth_sec[dict_key[3]][idx])
#                 ax.scatter(on_x, psth_working[on_x], color=colors[idx], alpha=0.8, marker=7, zorder=15)
#                 off_x = int(psth_sec[dict_key[11]][idx])
#                 ax.scatter(off_x, psth_working[off_x], color=colors[idx], alpha=0.8, marker=7, zorder=15)
#                 
#                 for i in on_area:
#                     i = int(i)
#                     ax.plot([i,i], [np.mean(psth_working[250:1250]),psth_working[i]], color=colors[idx], alpha=0.6, zorder=0)
#                 for i in off_area:
#                     i = int(i)
#                     ax.plot([i,i], [np.mean(psth_working[25250:26250]),psth_working[i]], color=colors[idx], alpha=0.6, zorder=0)
#                 
#             sustain = psth_sec['sustain']
#             [ax.hlines(y=_s, xmin=15000, xmax=25000, color=colors[idx], linestyle='--', zorder=15) for idx, _s in enumerate(sustain)]
#             [ax.axvline(x=_x, color='k', linestyle='--', alpha=0.5) for _x in [1250,26250]]
#             ax.set_title(f'{filename}  {para_type_full[p_type]}  inBF', fontsize=16)
#             
#             plt.savefig(f'{filename}_{para_type[p_type]}_inBF.png', dpi=500, bbox_inches='tight')
#             #plt.show()
#             plt.close()
# =============================================================================
        
        
        
        
        
# =============================================================================
#         ##Get PSTH parameter
#         psth_para_all = pd.read_excel('lsfm_psth_bf_para.xlsx', sheet_name='band')
#         if df_loc in list(psth_para_all['df_loc']):
#             
#             ## sweep bf
#             psth_inbf = psth_para_all[(psth_para_all['df_loc']==df_loc) & (psth_para_all['bf']=='in')]
#             psth_y = psth_bf[0][1]
#             onset_y = psth_y[1250]
#             offset_y = psth_y[26250]
#             peak_amp = (psth_y[psth_inbf['peak']] - psth_y[psth_inbf['peak_start']]).item()
#             time2peak = (psth_inbf['peak'].item() - 1250)/25
#             if np.isnan(psth_inbf['after_peak_transition'].item()):
#                 sustain_x1 = int(psth_inbf['after_peak_start'].item())
#             else:
#                 sustain_x1 = int(psth_inbf['after_peak_transition'].item())
#             sustain_x2 = int(psth_inbf['after_peak_end'].item())
#             
#             avg_sustain = np.mean(psth_y[sustain_x1:sustain_x2])
#             offpeak_amp = (psth_y[psth_inbf['offset_peak']] - psth_y[psth_inbf['peak_start']]).item()
#             time2offpeak = (psth_inbf['offset_peak'].item() - 26250)/25
#             HWFM = (psth_inbf['half_amp_end'] - psth_inbf['half_amp_start']).item()/25
#         
#             psth_para_inBF.append([onset_y, offset_y, peak_amp, time2peak, HWFM, avg_sustain, offpeak_amp, time2offpeak])
#             psth_inBF.append(psth_bf[0])
#             
#             
#             ## never sweep bf
#             psth_inbf = psth_para_all[(psth_para_all['df_loc']==df_loc) & (psth_para_all['bf']=='out')]
#             psth_y = psth_bf[1][1]
#             onset_y = psth_y[1250]
#             offset_y = psth_y[26250]
#             peak_amp = (psth_y[psth_inbf['peak']] - psth_y[psth_inbf['peak_start']]).item()
#             time2peak = (psth_inbf['peak'].item() - 1250)/25
#             if np.isnan(psth_inbf['after_peak_transition'].item()):
#                 sustain_x1 = int(psth_inbf['after_peak_start'].item())
#             else:
#                 sustain_x1 = int(psth_inbf['after_peak_transition'].item())
#             sustain_x2 = int(psth_inbf['after_peak_end'].item())
#             
#             avg_sustain = np.mean(psth_y[sustain_x1:sustain_x2])
#             offpeak_amp = (psth_y[psth_inbf['offset_peak']] - psth_y[psth_inbf['peak_start']]).item()
#             time2offpeak = (psth_inbf['offset_peak'].item() - 26250)/25
#             HWFM = (psth_inbf['half_amp_end'] - psth_inbf['half_amp_start']).item()/25
#         
#             psth_para_exBF.append([onset_y, offset_y, peak_amp, time2peak, HWFM, avg_sustain, offpeak_amp, time2offpeak])
#             psth_exBF.append(psth_bf[1])
#             
#             filenames.append(filename)
#             mouseIDs.append(mouse)
#             patch_sites.append(site)
#             bfs.append(bf)
#             bandwidths.append(bandwidth)
#         
#     psth_para_inBF = np.array(psth_para_inBF).swapaxes(0,1)
#     data_inBF = {'mouseid':mouseIDs, 'filename':filenames, 'patch_site':patch_sites, 
#                  'best_frequency':bfs, 'bandwidth':bandwidths,
#                  'onset': psth_para_inBF[0], 'offset': psth_para_inBF[1], 'peak_amplitude': psth_para_inBF[2],
#                  'time_to_peak':  psth_para_inBF[3], 'HWFM': psth_para_inBF[4], 'sustain': psth_para_inBF[5],
#                  'offpeak_amplitude': psth_para_inBF[6], 'time_to_offpeak': psth_para_inBF[7]}
#     
#     psth_para_exBF = np.array(psth_para_exBF).swapaxes(0,1)
#     data_exBF = {'mouseid':mouseIDs, 'filename':filenames, 'patch_site':patch_sites, 
#                  'best_frequency':bfs, 'bandwidth':bandwidths,
#                  'onset': psth_para_exBF[0], 'offset': psth_para_exBF[1], 'peak_amplitude': psth_para_exBF[2],
#                  'time_to_peak':  psth_para_exBF[3], 'HWFM': psth_para_exBF[4], 'sustain': psth_para_exBF[5],
#                  'offpeak_amplitude': psth_para_exBF[6], 'time_to_offpeak': psth_para_exBF[7]}
#     
#     psth_df_inbf = pd.DataFrame(data_inBF)
#     psth_df_inbf.to_csv('lsfm_psth_para_inBF_new.csv', index=False)
#     psth_df_exbf = pd.DataFrame(data_exBF)
#     psth_df_exbf.to_csv('lsfm_psth_para_exBF_new.csv', index=False)
# =============================================================================

# =============================================================================
#         ##plot psth in browser to get xy
#         pk_x = np.argmax(psth_bf[0][1][:12500])
#         pk_y = np.max(psth_bf[0][1][:12500])
#         off_x = np.argmax(psth_bf[0][1][25000:])+25000
#         off_y = psth_bf[0][1][off_x]
#         half = pk_y/2
#         decay = pk_y/math.e
#         fig = px.scatter(x=psth_bf[0][0], y=psth_bf[0][1], title=f'{df_loc}_{filename}_in_bf')
#         fig.add_trace(go.Scatter(x=[pk_x], y=[pk_y], mode = 'markers', 
#                                  name="Peak", hoverinfo="skip", marker_size = 15))
#         fig.add_trace(go.Scatter(x=[off_x], y=[off_y], mode = 'markers', 
#                                  name="Off_Peak", hoverinfo="skip", marker_size = 15))
#         fig.add_annotation(x=pk_x, y=pk_y, text=f'{pk_x}, {pk_y}', showarrow=False, yshift=25)
#         fig.add_annotation(x=off_x, y=off_y, text=f'{off_x}, {off_y}', showarrow=False, yshift=25)
#         fig.add_hline(y=half, line_width=2, line_dash='dash')
#         fig.add_hline(y=decay, line_width=2, line_dash='dash', line_color='red')
#         fig.show()
#         
#         pk_x = np.argmax(psth_bf[1][1][:12500])
#         pk_y = np.max(psth_bf[1][1][:12500])
#         off_x = np.argmax(psth_bf[1][1][25000:])+25000
#         off_y = psth_bf[1][1][off_x]
#         half = pk_y/2
#         decay = pk_y/math.e
#         fig = px.scatter(x=psth_bf[1][0], y=psth_bf[1][1], title=f'{df_loc}_{filename}_ex_bf')
#         fig.add_trace(go.Scatter(x=[pk_x], y=[pk_y], mode = 'markers',
#                                  name="Peak", hoverinfo="skip", marker_size = 15))
#         fig.add_trace(go.Scatter(x=[off_x], y=[off_y], mode = 'markers', 
#                                  name="Off_Peak", hoverinfo="skip", marker_size = 15))
#         fig.add_annotation(x=pk_x, y=pk_y, text=f'{pk_x}, {pk_y}', showarrow=False, yshift=15)
#         fig.add_annotation(x=off_x, y=off_y, text=f'{off_x}, {off_y}', showarrow=False, yshift=25)
#         fig.add_hline(y=half, line_width=2, line_dash='dash')
#         fig.add_hline(y=decay, line_width=2, line_dash='dash', line_color='red')
#         fig.show()
# =============================================================================
        
# =============================================================================
#         ##save to matlab        
#         to_matlab = {'stim':stim, 'resp':resp, 'fc':cf, 'bandwidth':band, 'mod_rate': modrate}
#         scipy.io.savemat(f'{filename}_data.mat', to_matlab)
#         
#         ##import from cwt file from matlab
#         import mat73
#         cwt = mat73.loadmat(r'C:\Users\McGinley3\Documents\GitHub\lsfm\20220527_006_cwt.mat')
#         f = cwt['f']
#         f = f[:,0]
#         wt = cwt['wt'].T[:,0]
#         wt_a = []
#         for w in wt:
#             wt_a.append(w)
#         wt_a = np.array(wt_a)
# 
#         ##use wavelet stimu to generate STRF
#         f = cwt['f']
#         wt = np.array(cwt['wt'])
#         wt = signal.resample(wt, 500, axis=2)
#         wt = np.ndarray.tolist(wt)
#         cwt = {'f':f, 'wt':wt}
#         
#         
#         s = lsfm_strf.STRF(cwt, resp, filename=filename)
#         s.strf()
# =============================================================================
        
# =============================================================================
#         n = cell_note.index[cell_note['filename']==filename][0]
#         bf = cell_note['best frequency'].loc[n]
#         features = cell_note['feature'].loc[n]
#         windows = cell_note['window'].loc[n].split(', ')
#         
#         """0: onset, 1:sustain, 2:offset"""
#         window = eval(windows[2])
#         #resp_at_freq_cell = np.load('restrain_resp_at_freq_cell.npy', allow_pickle=True)
#         #test = lsfm.nXing_cell(resp_at_freq_cell)
#         tune = (round(bf/2/1000,1), round(bf*2/1000,1))
# =============================================================================

        
# =============================================================================
#         """PSTH"""
#         p = lsfm_psth.Psth(resp_simus_fake, para, filename=f'{rf_para}', version=version)
#         _,_,_ = p.psth_all(plot=False, saveplot=True)
#         #lsfm_psth.psth_wwo_bf(resp, para, bf, version, filename, saveplot=True)
#         #p.psth_trend(tuning=tune, plot=True, saveplot=False)
#         #p.psth_para(plot=True, saveplot=False)
# =============================================================================

        
# =============================================================================
#         ##load from TDMS
#         fdir = df['path'][df_loc]
#         filename = df['filename'][df_loc]
#         version = df['Py_Version'][df_loc]
#         if version == 1:
#             t = Tdms_V1()
#             t.loadtdms(fdir, protocol=0, load_sound=True, precise_timing=True)
#         if version == 2:
#             t = Tdms_V2()
#             t.loadtdms(fdir, protocol=0, load_sound=True)
#         
#         
#         sound = t.stim_raw
# 
#         """reverse FIR"""
#         target_FIR = f'E:\in-vivo_patch\FIR_list\FIR_{df["FIR"][df_loc]}.txt'
#         
#         with open(target_FIR, 'r') as file:
#                  fir = np.array(file.read().split('\n')[:-1], dtype='float64')
#         sound_re = lsfm.inv_fir(sound, fir)
#         sound_re = t.cut(sound_re)
#         scipy.io.savemat(f'{filename}_invfir4cwt.mat', {'stim':sound_re})
# =============================================================================
        

        

# =============================================================================
#     ##invert fir to correct stimuli
#     with open('FIR_07_27_2021.txt', 'r') as file:
#         fir = np.array(file.read().split('\n')[:-1], dtype='float64')
#     sound, _ = t.get_raw()
#     sound_re = lsfm.inv_fir(sound, fir)
#     sound_re = t.cut(sound_re)
#     scipy.io.savemat(f'{filename}_invfir4cwt.mat', {'stim':sound_re})
# =============================================================================
    
    
    
