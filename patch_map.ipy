import numpy as np
import matplotlib.pyplot as plt
from scipy import signal,stats
import TFTool
import tone
import pandas as pd
import itertools
from lsfm_psth import Psth


%matplotlib inline
df = pd.read_csv('patch_list_E.csv', dtype={'date':str, '#':str})
idx_tone = df.index[(df['type']=='Pure Tones') & (df['project']!='Vc') & (df['hard_exclude']!='exclude')]
idx_tone = [i for i in idx_tone if i > 146]
idx_lsfm = df.index[(df['type']=='Log sFM') & (df['project']!='Vc') & (df['hard_exclude']!='exclude')]
idx_lsfm = [i for i in idx_lsfm if i > 146]

"""analysis type"""
get_tonePSTH = False
get_lsfmPSTH = False
correlate_PSTH = False
clean_coordinate = True


if get_tonePSTH:
    
    tonePSTH_all = {'name':[], 'psth':[]}
    
    for df_loc in idx_tone:
        filename = df['filename'][df_loc]
        version = df['Py_version'][df_loc]
        mouseID = df['mouse_id'][df_loc]
        fullname = mouseID+'_' + filename
        data = np.load(f'{filename}.npy', allow_pickle=True)
        resp = data.item()['resp']
        loud = sorted(set(data.item()['loud']))
        freq = sorted(set(data.item()['freq']))
        try:
            loud.remove(0.0)
            freq.remove(0.0)
        except:
            pass
                
        para = data.item()['para']
    
        resp_adjust = [tone.base_adjust(r) for r in resp]
        resp_merge, para_merge = tone.resp_merge(resp_adjust, para)
        resp_filt = TFTool.prefilter(resp_merge)
        yy = tone.psth(resp_filt, fullname)
        tonePSTH_all['name'].append(fullname)
        tonePSTH_all['psth'].append(yy)
        

if get_lsfmPSTH:
    
    lsfmPSTH_all = {'name':[], 'psth':[]}
    
    for df_loc in idx_lsfm:
        filename = df['filename'][df_loc]
        version = df['Py_version'][df_loc]
        mouseID = df['mouse_id'][df_loc]
        fullname = mouseID+'_' + filename
        data = np.load(f'{filename}_lsfm.npy', allow_pickle=True)
        resp = data.item()['resp']
        para = data.item()['para']
        
        psth = Psth(resp, para, fullname, version)
        xx,yy,err=psth.psth_all(plot=False, saveplot=True)
        lsfmPSTH_all['name'].append(fullname)
        lsfmPSTH_all['psth'].append(yy)
        
        
if correlate_PSTH:
    def corr_PSTH(psth_all, save=False):
        
        combination = list(itertools.combinations(psth_all['name'],2))
        combination_index = list((i,j) for (i,_), (j,_) in 
                                 itertools.combinations(enumerate(psth_all['name']),2))
        
        max_corr = []
        for i,j in combination_index:
            corr = signal.correlate(psth_all['psth'][i], psth_all['psth'][j], 'full')
            #+-30ms windows and get maximum correlation
            max_corr.append(corr[9250:10750].max())
            
        corr = pd.DataFrame(columns = ['combination', 'correlation'])
        corr['combination'] = combination
        corr['correlation'] = max_corr
        
        if save:
            corr.to_csv('max_correlation.csv', index=False)
            
    #corr_PSTH(tonePSTH_all)
    corr_PSTH(lsfmPSTH_all, save=True)
    
    
if clean_coordinate:
    coord = pd.read_excel('mapping_coordinate.xlsx', sheet_name='id_base')
    patch_coord = pd.read_excel('patch_coordinate.xlsx')
    final_coord = pd.DataFrame(columns=['MouseID', 'Region', 'X', 'Y'])
    temp_dict = {'MouseID':[], 'Region':[], 'X':[], 'Y':[]}
    
    mouseID = list(set(coord['MouseID']))
    for mouse in mouseID:
        coord_mouse = coord[coord['MouseID']==mouse]
        xx, yy = list(coord_mouse['x']), list(coord_mouse['y'])
        xx = [int(xx[0] - x) if not np.isnan(x) else x for x in xx]
        yy = [int(yy[0] - y) if not np.isnan(y) else y for y in yy]
        
        coord_mouse['x_adj'] = xx
        coord_mouse['y_adj'] = yy
        final_coord.loc[len(final_coord.index)] = [mouse, 'up', xx[1], yy[1]]
        final_coord.loc[len(final_coord.index)] = [mouse, 'low', xx[2], yy[2]]
        
        regions = ['a1', 'a2', 'aaf']
        for r in regions:
            region = coord_mouse[coord_mouse['site'] == r]

            if np.isnan(list(region['x_adj'])).all():
                final_coord.loc[len(final_coord.index)] = [mouse, r, np.nan, np.nan]
            elif list(np.isnan(list(region['x_adj']))).count(True) == 2:
                region_x = [x for x in region['x_adj'] if not np.isnan(x)]
                region_y = [y for y in region['y_adj'] if not np.isnan(y)]
                final_coord.loc[len(final_coord.index)] = [mouse, r, region_x[0], region_y[0]]
            elif not np.isnan(region['x_adj'].iloc[1]) and list(np.isnan(list(region['x_adj']))).count(True) == 1:
                x = [i for i in region['x_adj'] if not np.isnan(i)]
                y = [i for i in region['y_adj'] if not np.isnan(i)]
                avg_x = np.mean([np.mean(x), region['x_adj'].iloc[1]])
                avg_y = np.mean([np.mean(y), region['y_adj'].iloc[1]])
                final_coord.loc[len(final_coord.index)] = [mouse, r, avg_x, avg_y]
            else:
                x = [i for i in region['x_adj'] if not np.isnan(i)]
                y = [i for i in region['y_adj'] if not np.isnan(i)]
                
                avg_x = 
                avg_y =
                
    