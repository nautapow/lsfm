import numpy as np
import matplotlib.pyplot as plt
from scipy import signal,stats
import TFTool
import tone
import pandas as pd
import itertools
from lsfm_psth import Psth
import math


%matplotlib inline
df = pd.read_csv('patch_list_E.csv', dtype={'date':str, '#':str})
idx_tone = df.index[(df['type']=='Pure Tones') & (df['project']!='Vc') & (df['hard_exclude']!='exclude')]
idx_tone = [i for i in idx_tone if i > 146]
idx_lsfm = df.index[(df['type']=='Log sFM') & (df['project']!='Vc') & (df['hard_exclude']!='exclude')]
idx_lsfm = [i for i in idx_lsfm if i > 146]

region_x = [0, 1.0, 0.0, 1.0179375]
region_y = [0, 0.0, 0.9014375, 0.7396875]

"""analysis type"""
get_tonePSTH = False
get_lsfmPSTH = False
correlate_PSTH = False
get_region = False
map_bf = False
map_correlation = False


if get_tonePSTH:
    
    tonePSTH_all = {'name':[], 'psth':[]}
    
    for df_loc in idx_tone:
        filename = df['filename'][df_loc]
        version = df['Py_version'][df_loc]
        mouseID = df['mouse_id'][df_loc]
        fullname = mouseID+'_' + filename
        data = np.load(f'{filename}.npy', allow_pickle=True)
        resp = data.item()['resp']
        loud = sorted(set(data.item()['loud']))
        freq = sorted(set(data.item()['freq']))
        try:
            loud.remove(0.0)
            freq.remove(0.0)
        except:
            pass
                
        para = data.item()['para']
    
        resp_adjust = [tone.base_adjust(r) for r in resp]
        resp_merge, para_merge = tone.resp_merge(resp_adjust, para)
        resp_filt = TFTool.prefilter(resp_merge)
        yy = tone.psth(resp_filt, fullname)
        tonePSTH_all['name'].append(fullname)
        tonePSTH_all['psth'].append(yy)
        

if get_lsfmPSTH:
    
    lsfmPSTH_all = {'name':[], 'psth':[]}
    
    for df_loc in idx_lsfm:
        filename = df['filename'][df_loc]
        version = df['Py_version'][df_loc]
        mouseID = df['mouse_id'][df_loc]
        fullname = mouseID+'_' + filename
        data = np.load(f'{filename}_lsfm.npy', allow_pickle=True)
        resp = data.item()['resp']
        para = data.item()['para']
        
        psth = Psth(resp, para, fullname, version)
        xx,yy,err=psth.psth_all(plot=False, saveplot=False)
        lsfmPSTH_all['name'].append(fullname)
        lsfmPSTH_all['psth'].append(yy)
        
        
if correlate_PSTH:
    def corr_PSTH(psth_all, save=False):
        
        combination = list(itertools.combinations(psth_all['name'],2))
        combination_index = list((i,j) for (i,_), (j,_) in 
                                 itertools.combinations(enumerate(psth_all['name']),2))
        
        max_corr = []
        for i,j in combination_index:
            corr = signal.correlate(psth_all['psth'][i], psth_all['psth'][j], 'full')
            #+-30ms windows and get maximum correlation
            points = len(psth_all['psth'][i])
            #points per milisecond
            fs = 25
            max_corr.append(corr[points-fs*30:points+fs*30].max())
            
        corr = pd.DataFrame(columns = ['combination_1', 'combination_2', 'correlation'])
        corr['combination_1'] = [i[0] for i in combination]
        corr['combination_2'] = [i[1] for i in combination]
        corr['correlation'] = max_corr
        
        if save:
            corr.to_csv('max_correlation.csv', index=False)
            
    corr_PSTH(tonePSTH_all, save=True)
    #corr_PSTH(lsfmPSTH_all, save=True)
    
    
if map_bf:
    coords = pd.read_excel('mapping_coordinate.xlsx', sheet_name='coords')
    df2 = pd.read_csv('patch_list_with_bf.csv', dtype={'date':str, '#':str})
    idx = df2.index[(df2['type']=='Pure Tones') & (df2['project']=='Ic_map') & (df2['hard_exclude']!='exclude') 
                    & (df2['mouse_id']!='TG150') & (df2['mouse_id']!='TG147')]
    #patch_coord = pd.read_excel('patch_coordinate.xlsx')
    #final_coord = pd.DataFrame(columns=['MouseID', 'Region', 'X', 'Y'])
    #temp_dict = {'MouseID':[], 'Region':[], 'X':[], 'Y':[]}
    
    patch_x, patch_y = [],[]
    bf = []
    for i in idx:
        mouseid = df2.iloc[i]['mouse_id']
        site = f'Patch_{df2.iloc[i]["site"]}'
 
        patch_x.append(coords[(coords['mouseid'] == mouseid) & (coords['regions'] == site)].x.item())
        patch_y.append(coords[(coords['mouseid'] == mouseid) & (coords['regions'] == site)].y.item())
        bf.append(df2.iloc[i].best_frequency.item())
    
    bf_k = np.array([i/1000 for i in bf])
    patch_x = np.array(patch_x)
    patch_y = np.array(patch_y)
    
    fig, ax = plt.subplots()
    ax.scatter(region_x, region_y, c='black', s=500)
    im = ax.scatter(patch_x+np.random.normal(0, .03, patch_x.size), patch_y+np.random.normal(0, .03, patch_y.size), c=bf_k, cmap='inferno')
    fig.colorbar(im)
    plt.title('bf_map')
    plt.savefig('bf_map.png', dpi=500)
    

if map_correlation:
    
    #tone
    coords = pd.read_excel('mapping_coordinate.xlsx', sheet_name='coords')
    df2 = pd.read_csv('patch_list_with_bf.csv', dtype={'date':str, '#':str})
    idx = df2.index[(df2['type']=='Pure Tones') & (df2['project']=='Ic_map') & (df2['hard_exclude']!='exclude') 
                    & (df2['mouse_id']!='TG150') & (df2['mouse_id']!='TG147')]
    
    
    df_corr = pd.read_csv('max_correlation_tone.csv')
    mouse_1 = df_corr.loc[1].combination_1[:5]
    file_1 = df_corr.loc[1].combination_1[6:]
    
    
    