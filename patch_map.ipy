import numpy as np
import matplotlib.pyplot as plt
import matplotlib.colors as colors
from scipy import signal,stats
import TFTool
import tone
import pandas as pd
import itertools
from lsfm_psth import Psth
import math


%matplotlib inline
df = pd.read_csv('patch_list_E.csv', dtype={'date':str, '#':str})
idx_tone = df.index[(df['type']=='Pure Tones') & (df['project']!='Vc') & (df['hard_exclude']!='exclude')]
idx_tone = [i for i in idx_tone if i > 146]
idx_lsfm = df.index[(df['type']=='Log sFM') & (df['project']!='Vc') & (df['hard_exclude']!='exclude')]
idx_lsfm = [i for i in idx_lsfm if i > 146]

region = [[0, 1.0, 0.0, 1.029], [0, 0.0, 0.926, 0.726], [0.08, 0.08, 0.08, 0.203], [0.08, 0.08, 0.223, 0.166]]
region_x = [0, 1.0, 0.0, 1.029]
region_y = [0, 0.0, 0.926, 0.726]


"""analysis type"""
get_tonePSTH = False
get_lsfmPSTH = False
correlate_PSTH = False
get_region = False
map_bf = False
map_correlation = False
tone_analysis = False
lsfm_analysis = True

if get_tonePSTH:
    
    tonePSTH_all = {'name':[], 'psth':[]}
    
    for df_loc in idx_tone:
        filename = df['filename'][df_loc]
        version = df['Py_version'][df_loc]
        mouseID = df['mouse_id'][df_loc]
        fullname = mouseID+'_' + filename
        data = np.load(f'{filename}.npy', allow_pickle=True)
        resp = data.item()['resp']
        loud = sorted(set(data.item()['loud']))
        freq = sorted(set(data.item()['freq']))
        try:
            loud.remove(0.0)
            freq.remove(0.0)
        except:
            pass
                
        para = data.item()['para']
    
        resp_adjust = [tone.base_adjust(r) for r in resp]
        resp_merge, para_merge = tone.resp_merge(resp_adjust, para)
        resp_filt = TFTool.prefilter(resp_merge)
        yy = tone.psth(resp_filt, fullname)
        tonePSTH_all['name'].append(fullname)
        tonePSTH_all['psth'].append(yy)
        

if get_lsfmPSTH:
    
    lsfmPSTH_all = {'name':[], 'psth':[]}
    
    for df_loc in idx_lsfm:
        filename = df['filename'][df_loc]
        version = df['Py_version'][df_loc]
        mouseID = df['mouse_id'][df_loc]
        fullname = mouseID+'_' + filename
        data = np.load(f'{filename}_lsfm.npy', allow_pickle=True)
        resp = data.item()['resp']
        para = data.item()['para']
        
        psth = Psth(resp, para, fullname, version)
        xx,yy,err=psth.psth_all(plot=False, saveplot=False)
        lsfmPSTH_all['name'].append(fullname)
        lsfmPSTH_all['psth'].append(yy)
        
        
if correlate_PSTH:
    def corr_PSTH(psth_all, save=False):
        
        combination = list(itertools.combinations(psth_all['name'],2))
        combination_index = list((i,j) for (i,_), (j,_) in 
                                 itertools.combinations(enumerate(psth_all['name']),2))
        
        max_corr = []
        for i,j in combination_index:
            corr = signal.correlate(psth_all['psth'][i], psth_all['psth'][j], 'full')
            #+-30ms windows and get maximum correlation
            points = len(psth_all['psth'][i])
            #points per milisecond
            fs = 25
            max_corr.append(corr[points-fs*30:points+fs*30].max())
            
        corr = pd.DataFrame(columns = ['combination_1', 'combination_2', 'correlation'])
        corr['combination_1'] = [i[0] for i in combination]
        corr['combination_2'] = [i[1] for i in combination]
        corr['correlation'] = max_corr
        
        if save:
            corr.to_csv('max_correlation.csv', index=False)
            
    corr_PSTH(tonePSTH_all, save=True)
    #corr_PSTH(lsfmPSTH_all, save=True)
    
   
if map_bf:
    coords = pd.read_excel('mapping_coordinate.xlsx', sheet_name='coords')
    df2 = pd.read_csv('patch_list_with_bf.csv', dtype={'date':str, '#':str})
    idx = df2.index[(df2['type']=='Pure Tones') & (df2['project']=='Ic_map') & (df2['hard_exclude']!='exclude') 
                    & (df2['mouse_id']!='TG150') & (df2['mouse_id']!='TG147')]
    #patch_coord = pd.read_excel('patch_coordinate.xlsx')
    #final_coord = pd.DataFrame(columns=['MouseID', 'Region', 'X', 'Y'])
    #temp_dict = {'MouseID':[], 'Region':[], 'X':[], 'Y':[]}
    
    patch_x, patch_y = [],[]
    bf = []
    for i in idx:
        mouseID = df2.iloc[i]['mouse_id']
        site = f'Patch_{df2.iloc[i]["site"]}'
 
        patch_x.append(coords[(coords['mouseid'] == mouseID) & (coords['regions'] == site)].x.item())
        patch_y.append(coords[(coords['mouseid'] == mouseID) & (coords['regions'] == site)].y.item())
        bf.append(df2.iloc[i].best_frequency.item())
    
    bf_k = np.array([i/1000 for i in bf])
    patch_x = np.array(patch_x)
    patch_y = np.array(patch_y)
    
    fig, ax = plt.subplots()
    ax.scatter(region_x, region_y, c='black', s=500)
    im = ax.scatter(patch_x+np.random.normal(0, .03, patch_x.size), patch_y+np.random.normal(0, .03, patch_y.size), c=bf_k, cmap='inferno') 

    plt.title('bf_map')
    plt.savefig('bf_map.png', dpi=500)
    
def plot_map(patch_x, patch_y, arr, region=region, saveplot=False, **kwargs):
    from matplotlib import patches
    arr = np.array(arr)
    region_xy = list(zip(region[0], region[1]))
    
    title = kwargs.get('title')
    ylabel = kwargs.get('ylabel')
    vmax = kwargs.get('vmax')
    
    x_dev = np.random.normal(0, .03, len(patch_x))
    y_dev = np.random.normal(0, .03, len(patch_y))
    
    fig, ax = plt.subplots()
    for i in range(4):
        ellipse = patches.Ellipse(region_xy[i], region[2][i], region[3][i], angle=0, color='grey', alpha=0.9)
        ax.add_patch(ellipse)
    #ax.scatter(region_x, region_y, c='grey', s=500)
    
    from matplotlib.colors import LinearSegmentedColormap
    cmap = plt.get_cmap('inferno')
# =============================================================================
#     colors = cmap(np.linspace(0.25, 0.75, 256))
#     cmap = LinearSegmentedColormap('cmap', colors)
# =============================================================================
    
    im = ax.scatter(patch_x+x_dev, patch_y+y_dev, c=arr, cmap=cmap, s=50, alpha=0.9, vmax=vmax)
    cbar = fig.colorbar(im)
    cbar.ax.set_ylabel(ylabel)
    ax.set_title(title)
    
    if saveplot:
        plt.savefig(f'{title}_map.png', dpi=500, bbox_inches='tight')
        plt.show()
        plt.clf()
    else:
        plt.show()
        plt.clf()

    
def plot_ortho(ortho, arr, saveplot=False, **kwargs):
    arr = np.array(arr)
    title = kwargs.get('title')
    ylabel = kwargs.get('ylabel')
    
    fig, ax = plt.subplots()
    ax.scatter(ortho, arr)
    ax.set_ylabel(ylabel)
    ax.set_title(title)
    
    if saveplot:
        plt.savefig(f'{title}_ortho.png', dpi=500, bbox_inches='tight')
        plt.show()
        plt.clf()
    else:
        plt.show()
        plt.clf()


if tone_analysis:
    coords = pd.read_excel('mapping_coordinate.xlsx', sheet_name='coords')
    tone_psth = pd.read_csv('tone_psth_para_inBF.csv')
    mouseID = list(tone_psth[tone_psth['tuning'] != 'no']['mouseID'])
    filename = list(tone_psth[tone_psth['tuning'] != 'no']['filename'])
    bf = np.array(list(tone_psth[tone_psth['tuning'] != 'no']['best_frequency']))/1000
    bandwidth = list(tone_psth[tone_psth['tuning'] != 'no']['bandwidth'])
    peak = list(tone_psth[tone_psth['tuning'] != 'no']['peak_amplitude'])
    delay = list(tone_psth[tone_psth['tuning'] != 'no']['time2peak'])
    sites = list(tone_psth[tone_psth['tuning'] != 'no']['patch_site'])
    
    patch_x, patch_y, ortho = [],[],[]
    for i,m in enumerate(mouseID):
        site = f'Patch_{sites[i]}'
        patch_x.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].x.item())
        patch_y.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].y.item())
        ortho.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].orthogonal.item())
    
    plot_map(patch_x, patch_y, bf, saveplot=False, title='Best frequency', ylabel='kHz', vmax=25)
    plot_map(patch_x, patch_y, bandwidth, saveplot=True, title='Bandwidth', ylabel='octave')
    plot_map(patch_x, patch_y, peak, saveplot=True, title='Peak Amplitude', ylabel='mV')
    plot_map(patch_x, patch_y, delay, saveplot=True, title='Time to Peak', ylabel='ms')
    
    plot_ortho(ortho, bf, saveplot=True, title='Best frequency', ylabel='kHz')
    plot_ortho(ortho, bandwidth, saveplot=True, title='Bandwidth', ylabel='octave')
    plot_ortho(ortho, peak, saveplot=True, title='Peak Amplitude', ylabel='mV')
    plot_ortho(ortho, delay, saveplot=True, title='Time to Peak', ylabel='ms')
    

if lsfm_analysis:
    coords = pd.read_excel('mapping_coordinate.xlsx', sheet_name='coords')
    lsfm_psth_inBF = pd.read_csv('lsfm_psth_para_inBFband.csv')
    lsfm_psth_exBF = pd.read_csv('lsfm_psth_para_exBFband.csv')
    
    mouseIDs = list(lsfm_psth_inBF['mouseid'])
    sites = list(lsfm_psth_inBF['patch_site'])
    patch_x, patch_y, ortho = [],[],[]
    for i,m in enumerate(mouseIDs):
        site = f'Patch_{sites[i]}'
        patch_x.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].x.item())
        patch_y.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].y.item())
        ortho.append(coords[(coords['mouseid'] == m) & (coords['regions'] == site)].orthogonal.item())
        
    """sweeped bf"""
    peak = list(lsfm_psth_inBF['peak_amplitude'])
    plot_map(patch_x, patch_y, peak, saveplot=True, title='Peak_Amplitude_inBF', ylabel='mV')
    plot_ortho(ortho, peak, saveplot=True, title='Peak_Amplitude_inBF', ylabel='mV')
    
    HWFM = np.array(list(lsfm_psth_inBF['HWFM']))/25
    plot_map(patch_x, patch_y, HWFM, saveplot=True, title='HWFM_inBF', ylabel='ms')
    plot_ortho(ortho, HWFM, saveplot=True, title='HWFM_inBF', ylabel='ms')
    
    sustain = list(lsfm_psth_inBF['sustain'])
    plot_map(patch_x, patch_y, sustain, saveplot=True, title='Average_Sustain_inBF', ylabel='mv')
    plot_ortho(ortho, sustain, saveplot=True, title='Average_Sustain_inBF', ylabel='mv')
    
    offpeak = list(lsfm_psth_inBF['offpeak_amplitude'])
    plot_map(patch_x, patch_y, offpeak, saveplot=True, title='Offpeak_Amplitude_inBF', ylabel='mV')
    plot_ortho(ortho, offpeak, saveplot=True, title='Offpeak_Amplitude_inBF', ylabel='mV')
    
    ratio = np.array(offpeak)/np.array(peak)
    plot_map(patch_x, patch_y, ratio, saveplot=True, title='Peak_ratio_inBF', ylabel='ratio')
    plot_ortho(ortho, ratio, saveplot=True, title='Peak_ratio_inBF', ylabel='ratio')
    
    """not sweeped bf"""
    peak = list(lsfm_psth_exBF['peak_amplitude'])
    plot_map(patch_x, patch_y, peak, saveplot=True, title='Peak_Amplitude_exBF', ylabel='mV')
    plot_ortho(ortho, peak, saveplot=True, title='Peak_Amplitude_exBF', ylabel='mV')
    
    HWFM = np.array(list(lsfm_psth_exBF['HWFM']))/25
    plot_map(patch_x, patch_y, HWFM, saveplot=True, title='HWFM_exBF', ylabel='ms')
    plot_ortho(ortho, HWFM, saveplot=True, title='HWFM_exBF', ylabel='ms')
    
    sustain = list(lsfm_psth_exBF['sustain'])
    plot_map(patch_x, patch_y, sustain, saveplot=True, title='Average_Sustain_exBF', ylabel='mv')
    plot_ortho(ortho, sustain, saveplot=True, title='Average_Sustain_exBF', ylabel='mv')
    
    offpeak = list(lsfm_psth_exBF['offpeak_amplitude'])
    plot_map(patch_x, patch_y, offpeak, saveplot=True, title='Offpeak_Amplitude_exBF', ylabel='mV')
    plot_ortho(ortho, offpeak, saveplot=True, title='Offpeak_Amplitude_exBF', ylabel='mV')
    
    ratio = np.array(offpeak)/np.array(peak)
    plot_map(patch_x, patch_y, ratio, saveplot=True, title='Peak_Ratio_exBF', ylabel='ratio')
    plot_ortho(ortho, ratio, saveplot=True, title='Peak_Ratio_exBF', ylabel='ratio')

if map_correlation:
    
    #tone
    coords = pd.read_excel('mapping_coordinate.xlsx', sheet_name='coords')
    df2 = pd.read_csv('patch_list_with_bf.csv', dtype={'date':str, '#':str})
    idx = df2.index[(df2['type']=='Pure Tones') & (df2['project']=='Ic_map') & (df2['hard_exclude']!='exclude') 
                    & (df2['mouse_id']!='TG150') & (df2['mouse_id']!='TG147')]
    
    
    df_corr = pd.read_csv('max_correlation_tone.csv')
    mouse_1 = df_corr.loc[1].combination_1[:5]
    file_1 = df_corr.loc[1].combination_1[6:]
    
    
    